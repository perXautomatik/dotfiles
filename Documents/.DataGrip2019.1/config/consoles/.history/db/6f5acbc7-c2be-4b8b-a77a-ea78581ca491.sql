tempExcel.dbo.[4årsPåm2019]
;-- -. . -..- - / . -. - .-. -.--
select
*,
(select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) from
tempExcel.dbo.[4årsPåm2019] as qvc
;-- -. . -..- - / . -. - .-. -.--
with q as ((select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki)) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ))) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) as asd) as xsf) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (
        ANDEL, POSTORT, POSTNUMMER, 
    
    
                (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) as asd)) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select 
            ANDEL, POSTORT, POSTNUMMER,


                (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) as asd)) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select
            ANDEL, POSTORT, POSTNUMMER,


                (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               )
                       )) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select
            ANDEL, POSTORT, POSTNUMMER,


                (select top 1 ress
                   from (
                       select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               )
                       ) as qqdasf
                    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select
            ANDEL, POSTORT, POSTNUMMER,


                (select top 1 ress
                   from ( select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN  ) ) as qqdasf
                    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  case POSTNUMMER is not null then ((select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd
                    else adress
                    end)

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  (case POSTNUMMER is not null then (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd
                    else adress
                    end)

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  (case POSTNUMMER is not null then (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd)
                    else adress
                    end

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
with q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  (case when POSTNUMMER is not null then (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd)
                    else adress
                    end

                  --  where
                      --   not (ress = qvc.POSTORT OR ress = try_cast(qvc.POSTNUMMER as varchar))

    ) as adress,

                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  (case when POSTNUMMER is not null then (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd)
                    else adress
                    end
;-- -. . -..- - / . -. - .-. -.--
case when POSTNUMMER is not null then (select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd)
                    else adress
                    end;
;-- -. . -..- - / . -. - .-. -.--
select top 1 ress
                   from (select ltrim(ressWithSpaces) as ress
                         from (SELECT value as ressWithSpaces
                               FROM tempExcel.dbo.[4årsPåm2019] as qwer
                                        CROSS APPLY STRING_SPLIT(qwer.ADRESS, ',')
                               where qwer.adress = qvc.ADRESS AND qwer.NAMN = qvc.NAMN
                               ) soki) asd
;-- -. . -..- - / . -. - .-. -.--
DECLARE @T TABLE(Names VARCHAR(100))
INSERT INTO @T 
SELECT 'Niladri' UNION ALL 
SELECT 'Niladri/Biswas' UNION ALL 
SELECT 'RNA/ Team' UNION ALL 
SELECT 'Dotnet /Funda'

SELECT *
FROM @T
;-- -. . -..- - / . -. - .-. -.--
DECLARE @T TABLE(Names VARCHAR(100))
INSERT INTO @T 
SELECT 'Niladri' UNION ALL 
SELECT 'Niladri/Biswas' UNION ALL 
SELECT 'RNA/ Team' UNION ALL 
SELECT 'Dotnet /Funda'

--Split the Names column values by using the STRING_SPLIT function
SELECT f.*
FROM
(SELECT 
        Names
FROM @T)X
CROSS APPLY
(
        SELECT 
                Rn=ROW_NUMBER() Over(Partition by X.Names Order by X.Names)
                ,X.Names
                ,ExtractedValuesFromNames = value
        FROM STRING_SPLIT(X.Names,'/') AS D
)f
;-- -. . -..- - / . -. - .-. -.--
DECLARE @T TABLE(Names VARCHAR(100))
INSERT INTO @T 
SELECT 'Niladri' UNION ALL 
SELECT 'Niladri/Biswas' UNION ALL 
SELECT 'RNA/ Team' UNION ALL 
SELECT 'Dotnet /Funda'

--Split the Names column values by using the STRING_SPLIT function
;WITH splitNamesCTE AS(
SELECT f.*
FROM
(SELECT 
        Names
FROM @T)X
CROSS APPLY
(
        SELECT 
                Rn=ROW_NUMBER() Over(Partition by X.Names Order by X.Names)
                ,X.Names
                ,ExtractedValuesFromNames = value
        FROM STRING_SPLIT(X.Names,'/') AS D
)f)

SELECT
                Names
        ,FirstName = 
                                        STUFF(( SELECT '' + 
                                                        c2.ExtractedValuesFromNames + ' ' 
                                                        FROM splitNamesCTE c2
                                                        WHERE (c2.Names = c1.Names)
                                                        and c2.Rn=1 -- candidates for First Name
                                                        FOR XML PATH('')),1,0,'')
                ,LastName = 
                                        STUFF(( SELECT '' + 
                                                        c2.ExtractedValuesFromNames + ' ' 
                                                        FROM splitNamesCTE c2
                                                        WHERE (c2.Names = c1.Names)
                                                        and c2.Rn=2 -- candidates for Last Name
                                                        FOR XML PATH('')),1,0,'')
FROM splitNamesCTE c1
GROUP BY c1.Names
;-- -. . -..- - / . -. - .-. -.--
DECLARE
    @T TABLE
       (
           Names VARCHAR(100)
       )
INSERT INTO @T
SELECT 'Niladri'
UNION ALL
SELECT 'Niladri/Biswas'
UNION ALL
SELECT 'RNA/ Team'
UNION ALL
SELECT 'Dotnet /Funda'

--Split the Names column values by using the STRING_SPLIT function
;
WITH splitNamesCTE AS (
    SELECT f.*
    FROM (SELECT Names
          FROM @T) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.Names Order by X.Names)
                  , X.Names
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.Names, '/') AS D
         ) f)

SELECT Names
     , FirstName =
       STUFF((SELECT '' +
                     c2.ExtractedValuesFromNames + ' '
              FROM splitNamesCTE c2
              WHERE (c2.Names = c1.Names)
                and c2.Rn = 1 -- candidates for First Name
                  FOR XML PATH ('')), 1, 0, '')
     , LastName  =
       STUFF((SELECT '' +
                     c2.ExtractedValuesFromNames + ' '
              FROM splitNamesCTE c2
              WHERE (c2.Names = c1.Names)
                and c2.Rn = 2 -- candidates for Last Name
                  FOR XML PATH ('')), 1, 0, '')
FROM splitNamesCTE c1
;-- -. . -..- - / . -. - .-. -.--
q
;-- -. . -..- - / . -. - .-. -.--
WITH splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT Names
          FROM @T) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.Names Order by X.Names)
                  , X.Names
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.Names, '/') AS D
         ) f),



q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),

                
splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT Names
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.Names Order by X.Names)
                  , X.Names
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.Names, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.Names Order by X.Names)
                  , X.Names
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.Names, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.Names
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
    
     
     del1 as (select andel,namn,betckning,ärndenr,%%physlock%% as order from q),
     del2 as (select POSTORT,POSTNUMMER,adress,%%physlock%% as order from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,betckning,ärndenr,%%physloc%% as order from q),
     del2 as (select POSTORT,POSTNUMMER,adress,%%physloc%% as order from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,betckning,ärndenr,%%physloc%% as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,%%physloc%% as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,%%physloc%% as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,%%physloc%% as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,rownumber(over 1) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,rownumber(over 1) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY %%physloc%% ASC) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY %%physloc%% ASC) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY null) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY null) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(PARTITION BY null ORDER BY null) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(PARTITION BY null ORDER BY null) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(select null) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(select null) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/
 
 select * from del1
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


splitAdressCTE AS (
    SELECT f.*
    FROM (SELECT adress
          FROM q) X
             CROSS APPLY
         (
             SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress)
                  , X.adress
                  , ExtractedValuesFromNames = value
             FROM STRING_SPLIT(X.adress, '/') AS D
         ) f),


     rs as (select ANDEL                    as justForVisual
                    ,
                   POSTORT
                    ,
                   POSTNUMMER
                    ,
                   ADRESS
                    ,
                   NAMN
                    ,
                   (select top 1 namn
                    from q as x
                    where x.BETECKNING = q.BETECKNING
                      AND x.ADRESS = q.ADRESS
                      and x.NAMN <> q.NAMN) as Namn2
                    ,
                   BETECKNING
                    ,
                   ärndenr
            from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, '/') AS D ) f),

     del3 as (
         SELECT adress
              , FirstName =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                           FOR XML PATH ('')), 1, 0, '')
              , LastName  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , FirstName =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                           FOR XML PATH ('')), 1, 0, '')
              , LastName  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , FirstName =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , LastName  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn > 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn => 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nr from q),


    splitAdressCTE AS ( SELECT f.* FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT c1.Rn
                
                ,adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,del2.nrx FROM (SELECT adress FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT 

                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,del2.nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT

                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT

                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,ADRESS,c_o,ADRESS2,postadres,postnr
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by *
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress
              , C_O
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress
              
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                ltrim(STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, ''))
              , ltrim(Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , )PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress
              
     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                ltrim(STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, ''))
              , ltrim(Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                ), PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
ltrim(
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY %%physloc%%) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY physloc) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY (select null)) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,ROW_NUMBER() OVER(ORDER BY id) as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER() OVER(ORDER BY BY id) as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ROW_NUMBER() OVER(over (select null)) as nrx
                  ,ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr>,nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER(),nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ROW_NUMBER() OVER(order by (select null)) as nrx
                  ,ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr>,nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,ROW_NUMBER(),nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select ROW_NUMBER() OVER(order by (select null)) as nrx
                  ,ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ,ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),
                

     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (
         SELECT
                nrx,
                adress
              , C_O =
                STUFF(
                    (SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 1 -- candidates for First Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')
                        ), 1, 0, '')
              , Adress2  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 2 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , PostAdres  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn = 3 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
                , postnr  =
                STUFF((SELECT '' +
                              c2.ExtractedValuesFromNames + ' '
                       FROM splitAdressCTE c2
                       WHERE (c2.ADRESS = c1.ADRESS)
                         and c2.Rn >= 4 -- candidates for Last Name
                             group by c2.ExtractedValuesFromNames
                           FOR XML PATH ('')), 1, 0, '')
         FROM splitAdressCTE c1
         group by nrx,
                adress

     ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from q2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 over nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 using nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 using (nrx)
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del2.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2 join del3 on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet from del2 
     
           join
     del3 
         
         on del2.nrx = del3.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, ROW_NUMBER() OVER(order by (select null)) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, identity(int,1,1) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, identity(int, 1,1) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),na 
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select identity(int, 1,1) as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),na
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, newid() as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),na
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, newid() as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del2
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, newid() as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
q2 as (select *, newid() as nrx from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),
     
     
     
q2 as (select *, IDENTITY(int, 1, 1) as nrx  into q2 from q ),


     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx
;-- -. . -..- - / . -. - .-. -.--
WITH q as (select
                  ANDEL,
                  POSTORT,
                  POSTNUMMER,
                  adress,
                  NAMN,
                  BETECKNING,
                  ärndenr
           from tempExcel.dbo.[4årsPåm2019] qvc
           union
           select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
           from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                 from tempExcel.dbo.årsPåm2019Compl
                          join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
             ),


    go
    select *, IDENTITY(int, 1, 1) as nrx  into q2 from q
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL,
                                      POSTORT,
                                      POSTNUMMER,
                                      adress,
                                      NAMN,
                                      BETECKNING,
                                      ärndenr)
    select *
    from (select ANDEL,
                 POSTORT,
                 POSTNUMMER,
                 adress,
                 NAMN,
                 BETECKNING,
                 ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas
         )
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo. POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );
    
with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo. POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo. POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas )
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity() select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas )

with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    inert into dbo.#TempWithIdentity() select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );

with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity() select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );

with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity() select * from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );
;-- -. . -..- - / . -. - .-. -.--
if  exists (select * from dbo.sysobjects where [id] = object_id(N'dbo.t') AND objectproperty(id, N'IsUserTable') = 1)
    drop table dbo.t
;-- -. . -..- - / . -. - .-. -.--
if  exists (select * from dbo.sysobjects where [id] = object_id(N'dbo.t') AND objectproperty(id, N'IsUserTable') = 1)
    drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
if  exists (select * from dbo.sysobjects where [id] = object_id(N'dbo.#TempWithIdentity') AND objectproperty(id, N'IsUserTable') = 1)
    drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas );

with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
if  exists (select * from dbo.sysobjects where [id] = object_id(N'dbo.TempWithIdentity') AND objectproperty(id, N'IsUserTable') = 1)
    drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
if  exists (select * from dbo.sysobjects where [id] = object_id(N'dbo.#TempWithIdentity'))
    drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
;-- -. . -..- - / . -. - .-. -.--
insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas )
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i,x,y from dbo.#TempWithIdentity)



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i,x,y from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q2),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q2),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx

        --clean up
        drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),



     del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
     del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),


    splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

 del3 as ( SELECT nrx, adress , C_O = STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('') ), 1, 0, '') , Adress2 = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') , postnr = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') FROM splitAdressCTE c1 group by nrx, adress ),



    rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

     tz as (select * --removes dupes, by comparing strings and combining them in sorted order
            from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                         justForVisual,
                         POSTORT,
                         POSTNUMMER,
                         ADRESS,
                         NAMN,
                         Namn2,
                         BETECKNING,
                         ärndenr,
                         ROW_NUMBER() OVER (PARTITION BY
                             (case
                                  when rs.Namn2 is not null then case
                                                                     when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                     else rs.Namn2 + rs.NAMN end
                                  else
                                      rs.NAMN end
                                 )
                             ORDER BY BETECKNING,ADRESS
                             )                               As rn
                  FROM rs) t
            where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = case when max(c2.rn) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end,
                     Adress2   = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 2
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 3
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     postnr    = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn >= 4
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when max(c2.rn) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end),
                     Adress2   = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 2
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 3
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     postnr    = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn >= 4
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end),
                     Adress2   = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 2
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 3
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     postnr    = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn >= 4
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end),
                     Adress2   = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 2
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     PostAdres = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn = 3
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, ''),
                     postnr    = STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' '
                                        FROM splitAdressCTE c2
                                        WHERE (c2.ADRESS = c1.ADRESS)
                                          and c2.Rn >= 4
                                        group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     PostAdres = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then 
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then 
                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else null end),
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     PostAdres = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else null end)
              FROM splitAdressCTE c1
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else null end),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else null end)
              FROM splitAdressCTE c1
     
              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),
                     PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)
              FROM splitAdressCTE c1

              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
case when count(select 1 from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                , '"'+ q.POSTNUMMER + '*" AND "' + q.postort + '*"')) > 0 then q.POSTORT
                                                else 
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                end
;-- -. . -..- - / . -. - .-. -.--
case when 0 <
                                                count(select 1 from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                , '"'+ q.POSTNUMMER + '*" AND "' + q.postort + '*"'))
                                                then q.POSTORT
                                                else
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
;-- -. . -..- - / . -. - .-. -.--
case when 0 <
                                                (select count(select 1 from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                , '"'+ q.POSTNUMMER + '*" AND "' + q.postort + '*"')))
                                                then q.POSTORT
                                                else
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
;-- -. . -..- - / . -. - .-. -.--
select 1 from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                , '"'+ q.POSTNUMMER + '*" AND "' + q.postort + '*"'))
;-- -. . -..- - / . -. - .-. -.--
select value from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                , '"'+ q.POSTNUMMER + '*" AND "' + q.postort + '*"'))
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),
                     PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else
                                            case when 0 <
                                                (select count(select value from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,q.POSTNUMMER)))
                                                then q.POSTORT
                                                else
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
                                        end


                         ),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)
              FROM splitAdressCTE c1

              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
case when 0 <
                                                (select count(select value from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,(q.POSTNUMMER & q.POSTORT))))
                                                then q.POSTORT
                                                else
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
;-- -. . -..- - / . -. - .-. -.--
case when 0 <
                                                (select count(select value from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,'' + q.POSTNUMMER +' AND ' + q.POSTORT+'')))
                                                then q.POSTORT
                                                else
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
;-- -. . -..- - / . -. - .-. -.--
select count(select value from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,'' + q.POSTNUMMER +' AND ' + q.POSTORT+''))
;-- -. . -..- - / . -. - .-. -.--
select count(select * from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,'' + q.POSTNUMMER +' AND ' + q.POSTORT+''))
;-- -. . -..- - / . -. - .-. -.--
select * from q where q.ADRESS = c1.ADRESS and CONTAINS
                                                (
                                                STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                                ,'' + q.POSTNUMMER +' AND ' + q.POSTORT+'')
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),
                     PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else
                                           STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                            end
                                        end


                         ),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)
              FROM splitAdressCTE c1

              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr)
    select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
    from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
          from tempExcel.dbo.[4årsPåm2019] qvc
          union
          select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr
          from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr
                from tempExcel.dbo.årsPåm2019Compl
                         join tempExcel.dbo.ÄrendeNr4års2019
                              on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with q as (
        select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

     del3 as (SELECT nrx,
                  adress,
                     C_O       = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                                STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                      else null end),
                     Adress2   = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),
                     PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                            STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        else
                                           STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                                        end


                         ),
                     postnr    = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then
                                         STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')
                         else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)
              FROM splitAdressCTE c1

              group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

         tz as (select * --removes dupes, by comparing strings and combining them in sorted order
                from (SELECT master.dbo.FracToDec(justForVisual) as fra,
                             justForVisual,
                             POSTORT,
                             POSTNUMMER,
                             ADRESS,
                             NAMN,
                             Namn2,
                             BETECKNING,
                             ärndenr,
                             ROW_NUMBER() OVER (PARTITION BY
                                 (case
                                      when rs.Namn2 is not null then case
                                                                         when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2
                                                                         else rs.Namn2 + rs.NAMN end
                                      else
                                          rs.NAMN end
                                     )
                                 ORDER BY BETECKNING,ADRESS
                                 )                               As rn
                      FROM rs) t
                where t.rn = 1),

     zq as (select fra,
                   justForVisual,
                   POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr,
                   ROW_NUMBER() OVER (PARTITION BY BETECKNING
                       ORDER BY fra desc
                       ) As rn
            from tz),

     qz as (select POSTORT,
                   POSTNUMMER,
                   ADRESS,
                   NAMN,
                   Namn2,
                   BETECKNING,
                   ärndenr
            from zq
            where rn < 4
              AND fra > 0.3333
              and POSTORT is not null
              and POSTNUMMER is not null
              and ADRESS is not null
              and NAMN is not null),


     qz2 as (select POSTORT,
                    POSTNUMMER,
                    ADRESS,
                    NAMN,
                    Namn2,
                    BETECKNING,
                    ärndenr
             from zq
             where POSTORT is not null
               and POSTNUMMER is not null
               and ADRESS is not null
               and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity


    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))

    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with 
        q as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from q),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from q),
        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

        del3 as (SELECT nrx, adress, C_O = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end), Adress2 = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end), PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end ), postnr = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end) FROM splitAdressCTE c1 group by nrx, adress),

        rs as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from q as x where x.BETECKNING = q.BETECKNING AND x.ADRESS = q.ADRESS and x.NAMN <> q.NAMN) as Namn2 , BETECKNING , ärndenr from q),

        tz as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY (case when rs.Namn2 is not null then case when rs.NAMN > rs.namn2 then rs.NAMN + rs.Namn2 else rs.Namn2 + rs.NAMN end else rs.NAMN end ) ORDER BY BETECKNING,ADRESS ) As rn FROM rs) t where t.rn = 1),

        zq as (select fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from tz),

        filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from zq where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from zq where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from del3 join del2 on del3.nrx = del2.nrx join del1 on del2.nrx = del1.nrx
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
    drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with
        CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from CompletteratOrginal),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from CompletteratOrginal),

        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

        d3AdressSplitt as (SELECT nrx, adress, C_O = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end), Adress2 = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end), PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end ), postnr = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end) FROM splitAdressCTE c1 group by nrx, adress),

        eqweq as (select * from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),        
     
        ParaMakeMaka as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2 , BETECKNING , ärndenr from CompletteratOrginal),

        MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end ) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

        grupperaEfterAndel as (select fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

        filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from eqweq
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with
        CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from CompletteratOrginal),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from CompletteratOrginal),

        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

        d3AdressSplitt as (SELECT nrx, adress, C_O = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end), Adress2 = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end), PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end ), postnr = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end) FROM splitAdressCTE c1 group by nrx, adress),

        eqweq as (select * from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

        ParaMakeMaka as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2 , BETECKNING , ärndenr from CompletteratOrginal),

        MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end ) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

        grupperaEfterAndel as (select fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

        filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from eqweq
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with
        CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from CompletteratOrginal),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from CompletteratOrginal),

        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

        d3AdressSplitt as (SELECT nrx, adress, C_O = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end), Adress2 = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end), PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end ), postnr = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end) FROM splitAdressCTE c1 group by nrx, adress),

        eqweq as (select d3AdressSplitt.nrx,
                         d3AdressSplitt.adress,
                         C_O,
                         Adress2,
                         d3AdressSplitt.PostOrt,
                         postnr,
                         del2.POSTORT,
                         POSTNUMMER
                  from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

        ParaMakeMaka as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2 , BETECKNING , ärndenr from CompletteratOrginal),

        MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end ) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

        grupperaEfterAndel as (select fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

        filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from eqweq

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

with
        CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
        del1 as (select andel,namn,BETECKNING,ärndenr,i as nrx from CompletteratOrginal),
        del2 as (select POSTORT,POSTNUMMER,adress,i as nrx from CompletteratOrginal),

        splitAdressCTE AS ( SELECT f.* ,nrx FROM (SELECT adress,nrx FROM del2) X CROSS APPLY ( SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress) , X.adress , ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D ) f),

        d3AdressSplitt as (SELECT nrx, adress, C_O = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF( (SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else null end), Adress2 = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end), PostOrt = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end ), postnr = (case when (select max(c2.rn) from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS) and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end) FROM splitAdressCTE c1 group by nrx, adress),

        eqweq as (select d3AdressSplitt.nrx,
                         d3AdressSplitt.adress,
                         C_O,
                         Adress2,
                         d3AdressSplitt.PostOrt,
                         postnr,
                         del2.POSTORT as del2Post,
                         POSTNUMMER
                  from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

        ParaMakeMaka as (select ANDEL as justForVisual , POSTORT , POSTNUMMER , ADRESS , NAMN , (select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2 , BETECKNING , ärndenr from CompletteratOrginal),

        MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end ) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

        grupperaEfterAndel as (select fra, justForVisual, POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr, ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

        filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

 select * from eqweq

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          del2.adress as Adress2,
                          d3AdressSplitt.PostOrt,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER,
                          
                          
                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;
    

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          del2.adress as Adress2,
                          d3AdressSplitt.PostOrt,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          del2.adress as Adress2,
                          d3AdressSplitt.PostOrt,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          del2.adress as Adress2,
                          d3AdressSplitt.PostOrt as PostOrt2,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          Adress2,
                          d3AdressSplitt.PostOrt as PostOrt2,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          Adress2,
                          d3AdressSplitt.PostOrt as PostOrt2,
                          postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
   drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          ltrim(Adress2) as adress2,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          ltrim(postnr),
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  -- drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          ltrim(Adress2) as adress2,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          ltrim(postnr),
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          d3AdressSplitt.adress,
                          C_O,
                          ltrim(Adress2) as adress2,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          ltrim(postnr) as postnr,
                          del2.POSTORT,
                          POSTNUMMER


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  --drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          
                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT = CASE when contains(postort2, del2.POSTORT) then null else '0' end
                          ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  --drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT = CASE when contains(postort2, POSTORT) then null else '0' end
                          ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT = CASE when contains(postort2, POSTORT) then null else '0' end
                          ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT2,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq into ress
    
    create index idx_adress on ress(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT2,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq

    create index idx_adress on eqweq(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  --drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT2,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq

    create index idx_adress on eqweq(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  --drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq

    create index idx_adress on eqweq(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  --drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          d3AdressSplitt.POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq

    create index idx_adress on eqweq(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          d3AdressSplitt.POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select *
    from eqweq

    create index idx_adress on eqweq(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          d3AdressSplitt.POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select * into ress
    from eqweq

    create index idx_adress on ress(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          d3AdressSplitt.POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select nrx,
           C_O,
           cast(adress as varchar(255)) as adress,
           PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    create index idx_adress on ress(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    drop table ress
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),
         eqweq as (select d3AdressSplitt.nrx,

                          C_O,
                          ltrim(Adress2) as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          d3AdressSplitt.POSToRT,
                              ltrim(postnr) as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress as orgAdrr


                   from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

/*select POSTORT,
       POSTNUMMER,
       ADRESS,
       NAMN,
       Namn2,
       BETECKNING,
       qz.ärndenr,
       Fastighet
from qz
         right outer join tempExcel.dbo.ÄrendeNr4års2019 on qz.ärndenr = tempExcel.dbo.ÄrendeNr4års2019.ärndenr
 where ADRESS is null*/

    select nrx,
           C_O,
           cast(adress as varchar(255)) as adress,
           PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    create index idx_adress on ress(adress)
    ;


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  -- drop table dbo.#TempWithIdentity
    drop table ress
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,d3AdressSplitt.POSToRT,ltrim(postnr) as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        select nrx,C_O,cast(adress as varchar(255)) as adress,PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq

        create index idx_adress on ress(adress);
        select * from ress
        
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  -- drop table dbo.#TempWithIdentity
    drop table ress
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,
                          C_O,
                          ltrim(Adress2)                as adress,
                          ltrim(d3AdressSplitt.PostOrt) as PostOrt2,
                          del2.POSToRT,
                          ltrim(postnr)                 as postnr,
                          POSTNUMMER,
                          d3AdressSplitt.adress         as orgAdrr
                   from d3AdressSplitt
                            join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        select nrx,C_O,cast(adress as varchar(255)) as adress,PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq create index idx_adress on ress(adress);
    
    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  -- drop table dbo.#TempWithIdentity
    drop table ress
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq create index idx_adress on ress (PostOrt2);

    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT = case when contains(PostOrt2,postort) then postort else null end ,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--Check for existance
  drop table dbo.#TempWithIdentity
    
    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq create index idx_adress on ress (PostOrt2);

    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT = case when contains(PostOrt2,ress.POSToRT) then ress.POSToRT else null end ,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
create fulltext catalog fulltextCatalog as default
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity

    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq
  
  DROP FULLTEXT INDEX ON ress;

    CREATE FULLTEXT INDEX ON ress (PostOrt2)
    KEY INDEX idx_adress
    WITH STOPLIST = SYSTEM;


    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT = case when contains(PostOrt2,ress.POSToRT) then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity

    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

  DROP FULLTEXT INDEX ON ress;

    CREATE FULLTEXT INDEX ON ress (PostOrt2)
    KEY INDEX idx_adress
    WITH STOPLIST = SYSTEM;


    select nrx,
           C_O,
           adress,
           PostOrt2,
           --POSToRT = case when contains(PostOrt2,ress.POSToRT) then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

  DROP FULLTEXT INDEX ON ress;

    CREATE FULLTEXT INDEX ON ress (PostOrt2)
    KEY INDEX idx_adress
    WITH STOPLIST = SYSTEM;


    select nrx,
           C_O,
           adress,
           PostOrt2,
           --POSToRT = case when contains(PostOrt2,ress.POSToRT) then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity
DROP FULLTEXT INDEX ON ress;
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

     CREATE FULLTEXT INDEX ON ress (PostOrt2)
    KEY INDEX idx_adress
    WITH STOPLIST = SYSTEM;


    select nrx,
           C_O,
           adress,
           PostOrt2,
           --POSToRT = case when contains(PostOrt2,ress.POSToRT) then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
DROP FULLTEXT INDEX ON ress;
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT = case when PostOrt2 like ress.POSToRT + '%' then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2,
           POSToRT = case when PostOrt2 like  '%'+ ress.POSToRT + '%' then ress.POSToRT else null end,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
e nPostOrt2
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2 = case when PostOrt2 like  '%'+ ress.POSToRT + '%' AND PostOrt2 like '%'+ ress.postnr + '%'
               then ress.POSToRT else nPostOrt2 end,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2 = case when PostOrt2 like  '%'+ ress.POSToRT + '%' AND PostOrt2 like '%'+ ress.postnr + '%'
               then ress.POSToRT else PostOrt2 end,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2 = case when
                PostOrt2 like '%'+ ress.POSToRT AND PostOrt2 like ress.postnr + '%'
               then ress.POSToRT 
               else PostOrt2 end,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt2 = case when
                PostOrt2 like '%'+ ress.POSToRT 
               then ress.POSToRT
               else PostOrt2 end,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like ress.postnr + '%'
               then ress.POSToRT
               else PostOrt2 end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like ress.postnr + '%'
               then ress.postnr
               else PostOrt2 end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like POSTNUMMER + '%'
               then POSTNUMMER
               else PostOrt2 end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
               then POSTNUMMER
               else PostOrt2 end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
               then cast(POSTNUMMER as varchar(255))
               else PostOrt2 end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when
                PostOrt2 like '%'+ ress.POSToRT
               then ress.POSToRT
               else PostOrt2 end,
           postnr = case when
                PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' 
               then cast(POSTNUMMER as varchar(255))
               else
                   case when POSTNUMMER is null
                    then postnr else PostOrt2 end 
               end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when PostOrt2 like '%'+ ress.POSToRT then ress.POSToRT case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr = case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else PostOrt2 end end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr = 
        case 
            when 
                PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
                    then
                        cast(POSTNUMMER as varchar(255)) 
        else
            case when POSTNUMMER is null
                then postnr 
                    else PostOrt2 
                end
            end,
           POSTNUMMER,
           orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt = 
               case 
                   when 
                       PostOrt2 like '%' + ress.POSToRT 
                            then 
                                ress.POSToRT 
                            else
                                case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =
                    case
                        when
                            PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
                                then
                                    cast(POSTNUMMER as varchar(255))
                    else
                        case when POSTNUMMER is null
                            then postnr
                                else PostOrt2
                            end
                    end,
   POSTNUMMER,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =
               case
                   when
                       PostOrt2 like '%' + ress.POSToRT
                            then
                                ress.POSToRT
                            else
                                case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =
                    case
                        when
                            PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
                                then
                                    cast(POSTNUMMER as varchar(255))
                    else
                        case when POSTNUMMER is null
                            then postnr
                                else POSTNUMMER
                            end
                    end,
   POSTNUMMER,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =
               case
                   when
                       PostOrt2 like '%' + ress.POSToRT
                            then
                                ress.POSToRT
                            else
                                case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =
                    case
                        when
                            PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
                                then
                                    cast(POSTNUMMER as varchar(255))
                    else
                        case when POSTNUMMER is null
                            then postnr
                                else cast(POSTNUMMER as varchar(255))
                            end
                    end,
   POSTNUMMER,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           cast(PostOrt2 as varchar(255)) as PostOrt2,
           POSToRT,
           postnr,
           POSTNUMMER,
           orgAdrr
    into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =
               case
                   when
                       PostOrt2 like '%' + ress.POSToRT
                            then
                                ress.POSToRT
                            else
                                case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =
                    case
                        when
                            PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%'
                                then
                                    cast(POSTNUMMER as varchar(255))
                    else
                        case when POSTNUMMER is null
                            then postnr
                                else cast(POSTNUMMER as varchar(255))
                            end
                    end,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
   orgAdrr
    from eqweq

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + eqweq.POSToRT then eqweq.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
   orgAdrr
    from eqweq

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + eqweq.POSToRT then eqweq.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
           postort,
   orgAdrr
    from eqweq
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + eqweq.POSToRT then eqweq.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
           
   orgAdrr
    from eqweq
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt = case
                        when PostOrt2 like '%' + eqweq.POSToRT then eqweq.POSToRT
                        else case when PostOrt2 is null then eqweq.POSToRT else PostOrt2 end end,
           postnr = case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,

   orgAdrr
    from eqweq
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,
           C_O,
           adress,
           PostOrt = case
                        when PostOrt2 is null then eqweq.POSToRT
                            else case when PostOrt2 like '%' + eqweq.POSToRT then eqweq.POSToRT else PostOrt2 end end,
           postnr = case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,

   orgAdrr
    from eqweq
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
           ress.POSToRT,
   orgAdrr
    from ress

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,
           C_O,
           adress,
           PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,
           postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,
           ress.POSToRT as x,
   orgAdrr
    from ress
    wher postOrt <> x

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,C_O,adress,PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT as x,orgAdrr
 from ress wher postOrt <> x   

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,C_O,adress,PostOrt =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT as x,orgAdrr
 from ress where postOrt <> x

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr
 from ress where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq

    select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr
 from ress --where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    --select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq

    select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr
 from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress
    from eqweq) as ress --where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
drop table ress
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    --select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr into ress from eqweq

    select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr
 from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr
    from eqweq) as ress --where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)
        
        ,qsadf as (select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr
 from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr
    from eqweq) as ress)
    
select * from qsadf 
     where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,qsadf as (select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from eqweq) as ress)

select * from qsadf
     where postOrtZ <> POSToRT

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr
                                 from dbo.#TempWithIdentity),
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O     = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         eqweq as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2)                as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress         as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         ParaMakeMaka as (select ANDEL                                      as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual)                                                           as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,qsadf as (select nrx,C_O,adress,PostOrtZ =case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from eqweq) as ress)

select * from qsadf
     where adress is null or POSTORT is null

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),
    
         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),
         
         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),
         
         asdad as (select C_O,
                          adress,
                          PostOrtZ,
                          postnr,
                          andel,
                          namn,
                          BETECKNING,
                          ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx)
         
         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from asdad


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         asdad as (select C_O,
                          adress,
                          PostOrtZ,
                          postnr,
                          andel,
                          namn,
                          BETECKNING,
                          ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from asdad


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         asdad as (select C_O,adress,PostOrtZ,postnr,andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr, andel, namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from asdad


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         asdad as (select C_O,adress,PostOrtZ,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from CompletteratOrginal),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from asdad


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2
    

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from filterSmallOwnersBadAdress


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrt,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, postort, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from CompletteratOrginal as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = CompletteratOrginal.BETECKNING AND x.ADRESS = CompletteratOrginal.ADRESS and x.NAMN <> CompletteratOrginal.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2


drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from qz2filterSmallOwnersBadAdress
    
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select * from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

select filterSmallOwnersBadAdress.* from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr
    from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

    select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)
        
        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)
    
    select * from errorAdress full outer join årsPåm2019Compl on errorAdress.Fastighet = årsPåm2019Compl.Fastighet
    
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select * from errorAdress left outer join årsPåm2019Compl on errorAdress.Fastighet = årsPåm2019Compl.Fastighet

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select i, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select * from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i), ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr, i as nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress, i as nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           i,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           i,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3333 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.3 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.2 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select errorAdress.POSTORT,
           errorAdress.POSTNUMMER,
           errorAdress.ADRESS,
           errorAdress.NAMN,
           Namn2,
           Fastighet,
           errorAdress.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,
           BETECKNING,
           CompletteratOrginal.ärndenr
    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select 
           BETECKNING,
           CompletteratOrginal.ärndenr
           
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN,

    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,

           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         qz2 as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null)

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join ParaMakeMaka on errorAdress.Fastighet = ParaMakeMaka.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        ,errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join ParaMakeMaka as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr
    where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           nrx,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join ParaMakeMaka as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           ANDEL,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join ParaMakeMaka as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join ParaMakeMaka as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join GroupAdresses as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.POSTORT,
           CompletteratOrginal.POSTNUMMER,
           CompletteratOrginal.adress,
           CompletteratOrginal.NAMN

    from errorAdress left outer join del1 as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN

    from errorAdress left outer join del1 as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN

    from errorAdress left outer d3AdressSplitt del1 as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN

    from errorAdress left outer d3AdressSplitt as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN

    from errorAdress left outer join d3AdressSplitt as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           CompletteratOrginal.BETECKNING,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN

    from errorAdress left outer join d3AdressSplitt as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.Fastighet,
           CompletteratOrginal.ärndenr,
           CompletteratOrginal.NAMN
    from errorAdress left outer join d3AdressSplitt as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           CompletteratOrginal.*
    from errorAdress left outer join d3AdressSplitt as CompletteratOrginal on errorAdress.Fastighet = CompletteratOrginal.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join GroupAdresses as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join filterSmallOwnersBadAdress as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join  grupperaEfterAndel as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join  ParaMakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join  paraMakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select * from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

    select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select *
                      from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr
                                 ,ROW_NUMBER() OVER (PARTITION BY (case
                                                                        when ParaMakeMaka.Namn2 is not null then case
                                                                                                                     when ParaMakeMaka.NAMN > ParaMakeMaka.namn2
                                                                                                                         then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2
                                                                                                                     else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end
                                                                        else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn
                            FROM ParaMakeMaka) t
                      where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

  ,errorcheck as (  select
           errorAdress.*,
           asdasd.*
    from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from makeMaka

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select *
                      from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr
                                 ,ROW_NUMBER() OVER (PARTITION BY (case
                                                                        when ParaMakeMaka.Namn2 is not null then case
                                                                                                                     when ParaMakeMaka.NAMN > ParaMakeMaka.namn2
                                                                                                                         then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2
                                                                                                                     else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end
                                                                        else ParaMakeMaka.NAMN end) ORDER BY BETECKNING,ADRESS ) As rn
                            FROM ParaMakeMaka) t
                      where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

  ,errorcheck as (  select Fastighet as eFas,
                           errorAdress.ärndenr as eÄr,
                           asdasd.*
    from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from makeMaka

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select *
                      from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr
                                 ,ROW_NUMBER() OVER (PARTITION BY (case
                                when ParaMakeMaka.Namn2 is not null then case
                             when ParaMakeMaka.NAMN > ParaMakeMaka.namn2
                                 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2
                             else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end
                                else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn
                            FROM ParaMakeMaka) t
                      where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

  ,errorcheck as (  select Fastighet as eFas,
                           errorAdress.ärndenr as eÄr,
                           asdasd.*
    from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from makeMaka

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

         del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
         del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

         splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

         d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

         TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

         fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

         GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr
                   from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx
             group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

         ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

         MakeMaka as (select *
                      from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr
                                 ,ROW_NUMBER() OVER (PARTITION BY (case
                                when ParaMakeMaka.Namn2 is not null then case
                             when ParaMakeMaka.NAMN > ParaMakeMaka.namn2
                                 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2
                             else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end
                                else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn
                            FROM ParaMakeMaka) t
                      where t.rn = 1),

         grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

         filterSmallOwnersBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where rn < 4 AND fra > 0.25 and POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

        errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

  ,errorcheck as (  select Fastighet as eFas,
                           errorAdress.ärndenr as eÄr,
                           asdasd.*
    from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select top 1 * from filterBadAdress order by fra union select top 2 * from filterBadAdress order by fra where fra > 0.25 union select top 3 * from filterBadAdress order by fra where fra > 0.25)

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select top 1 * from filterBadAdress order by fra union
    select top 2 *
    from filterBadAdress
    where fra > 0.25
    order by fra
    union
    select top 3 *
    from filterBadAdress
    where fra > 0.25
    order by fra
    )

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
    select top 1 * from filterBadAdress order by fra 
    union
    select * from (select top 3 * from filterBadAdress where fra > 0.25 order by fra) as asd
    )

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
    select top 1 * from filterBadAdress order by fra
    union
    select * from (select top 3 * from filterBadAdress where fra > 0.25 order by fra) as asd
    ),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
    select top 1 * from filterBadAdress order by fra
    union
    select * from (select top 3 * from filterBadAdress where fra > 0.25 order by fra) as asd
    ),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
select * from filterBadAdress as q cross apply           
    (select top 1 * from filterBadAdress as theOne where q.ärndenr = theOne.ärndenr and q.namn = theOne.namn order by fra 
    union
    select top 3 * from filterBadAdress as thethree where q.ärndenr = theOne.thethree and q.namn = thethree.namn AND fra > 0.25 order by fra ) A
    ),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
select * from filterBadAdress as q cross apply
    (select top 1 * from filterBadAdress as theOne where q.ärndenr = theOne.ärndenr and q.namn = theOne.namn order by fra
    union
    select top 3 * from filterBadAdress as thethree where q.ärndenr = thethree.ärndenr and q.namn = thethree.namn AND fra > 0.25 order by fra ) A
    ),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (
             select q.fra,
                    q.POSTORT,
                    q.POSTNUMMER,
                    q.ADRESS,
                    q.NAMN,
                    q.Namn2,
                    q.BETECKNING,
                    q.ärndenr
             from filterBadAdress as q cross apply
    (select top 1 * from filterBadAdress as theOne where q.ärndenr = theOne.ärndenr and q.namn = theOne.namn order by fra
    union
    select top 3 * from filterBadAdress as thethree where q.ärndenr = thethree.ärndenr and q.namn = thethree.namn AND fra > 0.25 order by fra ) A
    ),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorcheck

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr from filterBadAdress as q cross apply(select top 1 * from filterBadAdress as theOne where q.ärndenr = theOne.ärndenr and q.namn = theOne.namn order by fra union select top 3 * from filterBadAdress as thethree where q.ärndenr = thethree.ärndenr and q.namn = thethree.namn AND fra > 0.25 order by fra ) A),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             from filterBadAdress as theOne
                                                             where q.ärndenr = theOne.ärndenr
                                                               and q.namn = theOne.namn
                                                             order by fra
                                                             union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra) A),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             from filterBadAdress as theOne
                                                             where q.ärndenr = theOne.ärndenr
                                                               and q.namn = theOne.namn
                                                             order by fra
                                                             /*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra) A*/),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             from filterBadAdress as theOne
                                                             where q.ärndenr = theOne.ärndenr
                                                               and q.namn = theOne.namn
                                                             order by fra
                                                             /*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra)*/ A),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             from filterBadAdress as theOne
                                                             where q.ärndenr = theOne.ärndenr
                                                               and q.namn = theOne.namn
                                                             order by fra
                                                             /*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/) A),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             (select *,theOne.ärndenr + theOne.namn as key from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where q.ärndenr + q.namn = asff.key
                                                     as gasd
                                                             /*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/) A),

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 *
                                                             (select *,theOne.ärndenr + theOne.namn as key from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where q.ärndenr + q.namn = asff.key
                                                     as gasd) A),
/*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/
         
                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 * from
                                                             (select *,theOne.ärndenr + theOne.namn as key from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where q.ärndenr + q.namn = asff.key
                                                     as gasd) A),
/*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 * from
                                                             (select *,theOne.ärndenr + theOne.namn as keyz 
                                                             from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where q.ärndenr + q.namn = asff.keyz
                                                     as gasd) A),
/*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 * from
                                                             (select top 100 *,theOne.ärndenr + theOne.namn as keyz
                                                             from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where q.ärndenr + q.namn = asff.keyz
                                                     as gasd) A),
/*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr
                                        from filterBadAdress as q
                                                 cross apply(select top 1 * from
                                                             (select top 100 *,concat(theOne.ärndenr,theOne.namn) as keyz
                                                             from filterBadAdress as theOne
                                                             order by fra) as asff
                                                     where concat(q.ärndenr,q.namn) = asff.keyz
                                                     as gasd) A),
/*union
                                                             select top 3 *
                                                             from filterBadAdress as thethree
                                                             where q.ärndenr = thethree.ärndenr
                                                               and q.namn = thethree.namn
                                                               AND thethree.fra > 0.25
                                                             order by fra*/

                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select * from (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr,
                                                ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum
                                        from filterBadAdress as q
                                                INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X
                                            WHERE X.RowNum = 1),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select * from (select * from (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr,
                                                ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum
                                        from filterBadAdress as q
                                                INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X
                                            WHERE X.RowNum = 1) as asdasd
                                            union 
                                            select * from (select * from (select q.fra,
                                               q.POSTORT,
                                               q.POSTNUMMER,
                                               q.ADRESS,
                                               q.NAMN,
                                               q.Namn2,
                                               q.BETECKNING,
                                               q.ärndenr,
                                                ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum
                                        from filterBadAdress as q
                                                INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X
                                            WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx
             
                                            ),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from errorAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

         filterSmallOwnersBadAdress as (select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select * from (select * from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
select cast(eq2 as int)+cast(eq3 as int) as fel,
       recTillsynsobjektID,
       strVatten,
       _Vatten_,
       intByggnadsaar,
       flikAvloppsanläggnByggnadsår
from MittVsEdpAvlopsAnl
;-- -. . -..- - / . -. - .-. -.--
select recTillsynsobjektID,
       cast(eq2 as int)+cast(eq3 as int) as fel,
       strVatten,
       _Vatten_,
       intByggnadsaar,
       flikAvloppsanläggnByggnadsår
from MittVsEdpAvlopsAnl
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select
                                                      POSTORT,
                                                      POSTNUMMER,
                                                      ADRESS,
                                                      NAMN,
                                                      Namn2,
                                                      BETECKNING,
                                                      ärndenr,
                                                    C_o
                                               from (select fra,
                                                            POSTORT,
                                                            POSTNUMMER,
                                                            ADRESS,
                                                            NAMN,
                                                            Namn2,
                                                            BETECKNING,
                                                            ärndenr,
                                                            RowNum,
                                                            c_o
                                                     from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select
                                                      POSTORT,
                                                      POSTNUMMER,
                                                      ADRESS,
                                                      NAMN,
                                                      Namn2,
                                                      BETECKNING,
                                                      ärndenr
                                                
                                               from (select fra,
                                                            POSTORT,
                                                            POSTNUMMER,
                                                            ADRESS,
                                                            NAMN,
                                                            Namn2,
                                                            BETECKNING,
                                                            ärndenr,
                                                            RowNum
                                                            
                                                     from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select
                                                      *
                                                
                                               from (select *

                                                     from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity

    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select *from (SELECT master.dbo.FracToDec(justForVisual) as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, BETECKNING, ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select
                                                      *

                                               from (select *

                                                     from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
drop table dbo.#TempWithIdentity

    --create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,C_O,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select fra,C_O,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,rn from (SELECT master.dbo.FracToDec(justForVisual)                                                                      as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,C_O,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,C_O,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,RowNum from (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,RowNum from (select q.fra,q.C_O,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.C_O,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity
;-- -. . -..- - / . -. - .-. -.--
--create temp table to add an identity column
    create table dbo.#TempWithIdentity(i int not null identity(1,1) primary key,POSTORT varchar(255), POSTNUMMER int, ADRESS varchar(255), NAMN varchar(255), andel varchar(255), BETECKNING varchar(255), ärndenr varchar(255))
    --populate the temporary table
    insert into dbo.#TempWithIdentity(ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr) select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from (select ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from tempExcel.dbo.[4årsPåm2019] qvc union select ANDEL, POSTORT, POSTNUMMER, ADRESS, NAMN, BETECKNING, ärndenr from (select POSTORT, POSTNUMMER, ADRESS, NAMN, andel, ÄrendeNr4års2019.Fastighet as BETECKNING, ärndenr from tempExcel.dbo.årsPåm2019Compl join tempExcel.dbo.ÄrendeNr4års2019 on ÄrendeNr4års2019.Fastighet = årsPåm2019Compl.Fastighet) as asdas) as sdf;

    with CompletteratOrginal as (select max(i) as nrx, max(ANDEL) as ANDEL, POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr from dbo.#TempWithIdentity
                                    group by POSTORT, POSTNUMMER, adress, NAMN, BETECKNING, ärndenr),

                del1 as (select andel, namn, BETECKNING, ärndenr,nrx from CompletteratOrginal),
                del2 as (select POSTORT, POSTNUMMER, adress,nrx from CompletteratOrginal),

                splitAdressCTE AS (SELECT f.*, nrx FROM (SELECT adress, nrx FROM del2) X CROSS APPLY (SELECT Rn=ROW_NUMBER() Over (Partition by X.adress Order by X.adress),X.adress, ExtractedValuesFromNames = value FROM STRING_SPLIT(X.adress, ',') AS D) f),

                d3AdressSplitt as (SELECT nrx,adress,C_O = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else null end),Adress2 = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 1 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),PostOrt = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 2 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end),postnr  = (case when (select max(c2.rn)from splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)) >= 4 then STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn >= 4 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '')else STUFF((SELECT '' + c2.ExtractedValuesFromNames + ' ' FROM splitAdressCTE c2 WHERE (c2.ADRESS = c1.ADRESS)and c2.Rn = 3 group by c2.ExtractedValuesFromNames FOR XML PATH ('')), 1, 0, '') end)FROM splitAdressCTE c1 group by nrx, adress),

                TrimValues as (select d3AdressSplitt.nrx,C_O,ltrim(Adress2) as adress,ltrim(d3AdressSplitt.PostOrt) as PostOrt2,del2.POSToRT,ltrim(postnr)                 as postnr,POSTNUMMER,d3AdressSplitt.adress as orgAdrr from d3AdressSplitt join del2 on d3AdressSplitt.nrx = del2.nrx),

                fixPostOrt as (select nrx,C_O,adress,PostOrtZ = case when PostOrt2 like '%' + ress.POSToRT then ress.POSToRT else case when PostOrt2 is null then postort else PostOrt2 end end,postnr =case when PostOrt2 like cast(POSTNUMMER as varchar(255)) + '%' then cast(POSTNUMMER as varchar(255))else case when POSTNUMMER is null then postnr else cast(POSTNUMMER as varchar(255)) end end,ress.POSToRT,orgAdrr from (select nrx,C_O,adress,cast(PostOrt2 as varchar(255)) as PostOrt2,POSToRT,postnr,POSTNUMMER,orgAdrr from TrimValues) as ress),

                GroupAdresses as (select C_O,adress,PostOrtZ as postort,postnr as POSTNUMMER,max(andel) as andel,namn,BETECKNING,ärndenr from del1 join fixPostOrt on del1.nrx = fixPostOrt.nrx group by C_O, adress, PostOrtZ, postnr,  namn, BETECKNING, ärndenr),

                ParaMakeMaka as (select ANDEL as justForVisual,POSTORT,C_O,POSTNUMMER,ADRESS,NAMN,(select top 1 namn from GroupAdresses as x where x.BETECKNING = GroupAdresses.BETECKNING AND x.ADRESS = GroupAdresses.ADRESS and x.NAMN <> GroupAdresses.NAMN) as Namn2,BETECKNING,ärndenr from GroupAdresses),

                MakeMaka as (select fra,C_O,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,rn from (SELECT master.dbo.FracToDec(justForVisual)                                                                      as fra,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,C_O,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY (case when ParaMakeMaka.Namn2 is not null then case when ParaMakeMaka.NAMN > ParaMakeMaka.namn2 then ParaMakeMaka.NAMN + ParaMakeMaka.Namn2 else ParaMakeMaka.Namn2 + ParaMakeMaka.NAMN end else ParaMakeMaka.NAMN end),BETECKNING ORDER BY BETECKNING,ADRESS ) As rn FROM ParaMakeMaka) t where t.rn = 1),

                grupperaEfterAndel as (select fra,C_O,justForVisual,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,ROW_NUMBER() OVER (PARTITION BY BETECKNING ORDER BY fra desc ) As rn from MakeMaka),

                filterBadAdress as (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr from grupperaEfterAndel where POSTORT is not null and POSTNUMMER is not null and ADRESS is not null and NAMN is not null),

                filterSmallOwnersBadAdress as (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,RowNum from (select fra,C_O,POSTORT,POSTNUMMER,ADRESS,NAMN,Namn2,BETECKNING,ärndenr,RowNum from (select q.fra,q.C_O,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum = 1) as asdasd union select *from (select *from (select q.fra,q.C_O,q.POSTORT,q.POSTNUMMER,q.ADRESS,q.NAMN,q.Namn2,q.BETECKNING,q.ärndenr,ROW_NUMBER() OVER ( PARTITION BY q.ärndenr ORDER BY q.fra desc ) RowNum from filterBadAdress as q INNER JOIN filterBadAdress thethree ON q.ärndenr = thethree.ärndenr and q.namn = thethree.namn) X WHERE X.RowNum > 1 and X.RowNum < 4 AND fra > 0.3) as asdasdx),



                errorAdress as (select POSTORT, POSTNUMMER, ADRESS, NAMN, Namn2, Fastighet, ÄrendeNr4års2019.ärndenr from filterSmallOwnersBadAdress right outer join ÄrendeNr4års2019 on ÄrendeNr4års2019.ärndenr = filterSmallOwnersBadAdress.ärndenr where namn is null)

                ,errorcheck as (  select Fastighet as eFas,errorAdress.ärndenr as eÄr, asdasd.*from errorAdress left outer join  MakeMaka as asdasd on errorAdress.Fastighet = asdasd.BETECKNING)

    select *
    from filterSmallOwnersBadAdress

drop table dbo.#TempWithIdentity