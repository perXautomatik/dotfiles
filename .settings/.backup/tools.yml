tools:
- name: Open in Git-Gui
  fileStarter: {command: '${gitDir}\mingw64\bin\wish.exe', parameters: '"${gitDir}\mingw64\libexec\git-core"\git-gui
      -- "--working-dir" ${repositoryRootPath}'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
- id: openGitShell
  name: Open in Git-Shell
  fileStarter: {command: '${gitDir}\git-bash.exe', parameters: '--cd=${filePath}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: false
- name: Open in Gitk
  fileStarter: {command: gitk.exe, parameters: '-- ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- id: openInPowershell
  name: Open in Powershell
  fileStarter: {command: cmd.exe, parameters: '/c start powershell.exe -noexit -command
      Set-Location -literalPath ''${filePath}'''}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  forFilesNotDirectories: false
- id: revealInExplorer
  name: Reveal in Explorer
  fileStarter: {command: explorer.exe, parameters: '/select, ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- id: openInExplorer
  name: Open in Explorer
  fileStarter: {command: explorer.exe, parameters: '/e, ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  forFilesNotDirectories: false
- name: Open GitDir
  fileStarter: {command: powershell.exe, parameters: 'set-location "${repositoryRootPath}"
      ; $pathx = invoke-expression ''git rev-parse --git-dir'' ; explorer ( resolve-path
      "$pathx" )'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
- name: Open GitDir/worktrees
  fileStarter: {command: powershell.exe, parameters: 'set-location "${repositoryRootPath}"
      ; $pathx = invoke-expression ''git rev-parse --git-dir'' ; explorer ( join-path
      (resolve-path "$pathx") ''.git/worktrees'' )'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
- id: openFile
  name: Open File
  fileStarter: {command: '${smartGitDir}\bin\open.exe', parameters: '${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  forFilesNotDirectories: true
- id: editInNotepad
  name: 'bcomp: Edit'
  fileStarter: {command: BComp.exe, parameters: '${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  forFilesNotDirectories: true
- name: 'bcomp: CompareW'
  fileStarter: {command: powershell.exe, parameters: 'invoke-command -scriptblock
      {param($param1) ; $parx = get-content $param1 ; BComp @parx} -ArgumentList ("''${selectionFile}''")'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
  confirmationMessage: -Raw -Replace "`r`n",","
- name: Set Remote Origin From Clipboard
  fileStarter: {command: powershell.exe, parameters: 'set-location "${repositoryRootPath}"
      ; git remote add origin (get-clipboard) ; git fetch --all ;  git checkout --track
      remotes/origin/master'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
- name: path to clipboard
  fileStarter: {command: powershell.exe, parameters: '"''${filePath}''" | set-clipboard'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: 'folder: .gitignore all'
  fileStarter: {command: powershell.exe, parameters: 'set-location "''${filePath}''";
      ''*'' | set-content ''.gitignore'''}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: false
- name: ignore subfolder
  fileStarter: {command: powershell.exe, parameters: '$p1 = "''${selectionFile}''"
      ; $p1 = convert-path $p1  ;  $p2 ="''${repositoryRootPath}''" ;  $p2 = convert-path
      $p2; invoke-command -scriptblock {param($param1,$param2) ;   (coreutils realpath
      --relative-to="$param2" ( $param1 | split-path -parent )).replace(''\'',''/'')
      >> (Join-Path -Path $param2 -ChildPath ''.gitignore'')} -ArgumentList $p1, $p2'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: true
- name: 'TGit: RefLog'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:reflog /path ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: 'TGit: Graph'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:revisiongraph
      /path ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: 'TGit: Settings'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:Settings /path
      ${filePath}'}
  useForOpen: false
  waitUntilFinished: false
  filePattern: '*'
- name: 'TGit: sync'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:sync /path ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: 'TGit: Log'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:log /path ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: 'TGit: Commit'
  fileStarter: {command: TortoiseGitProc.exe, parameters: '/command:commit /path ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
- name: Git Add
  keystroke: CTRL+CR
  fileStarter: {command: '${git}', parameters: 'add ${fileName}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  confirmationMessage: --cd=${repositoryRootPath} -c "git rm --cached -r ${fileName}"
- name: 'FilterRepo: Analyze'
  fileStarter: {command: '${git}', parameters: filter-repo --analyze --force}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
- name: 'Index: De-Index All'
  fileStarter: {command: '${git}', parameters: git reset}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  confirmationMessage: --cd=${repositoryRootPath} -c "git rm --cached -r ${fileName}"
- id: gitConfigList
  name: 'Show output: Git Config'
  keystroke: CTRL+C
  fileStarter: {command: '${git}', parameters: config --list --show-origin}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
- name: Push -OnDemand
  fileStarter: {command: '${git}', parameters: push --recurse-submodules=on-demand}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  confirmationMessage: --cd=${filePath} -c "git submodule absorbgitdir"
- name: Submodule - Absorbe
  fileStarter: {command: '${git}', parameters: submodule absorbgitdirs}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  confirmationMessage: --cd=${filePath} -c "git submodule absorbgitdir"
- id: verifyDatabase
  name: Verify Database
  fileStarter: {command: '${git}', parameters: fsck --full --no-progress}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
- name: Reset Assume Unchanged
  fileStarter: {command: '${gitDir}\git-bash.exe', parameters: '--cd=${filePath} -c
      "git ls-files -v | grep ''^[a-z]'' | cut -c3- | xargs git update-index --no-assume-unchanged"'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: false
- name: 'fn: DeleteIndex'
  keystroke: CTRL+DEL
  fileStarter: {command: '${git}', parameters: 'rm --cached -r ${fileName}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  confirmationMessage: --cd=${repositoryRootPath} -c "git rm --cached -r ${fileName}"
- name: 'fp: AddAsSafeDir'
  fileStarter: {command: '${git}', parameters: 'config --global --add safe.directory
      ${filePath}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: false
  requiresConfirmation: true
  confirmationMessage: --cd=${filePath} -c "git config --global --add safe.directory
    $(pwd)"
- name: 'fp: GitInit'
  fileStarter: {command: '${git}', parameters: 'init ${filePath}'}
  useForOpen: true
  waitUntilFinished: false
  filePattern: '*'
  forFilesNotDirectories: false
- id: setExecutable
  name: 'fp: Set Executable Flag'
  fileStarter: {command: '${git}', parameters: 'update-index --chmod=+x -- ${filePath}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: true
- id: unsetExecutable
  name: 'fp: Unset Executable Flag'
  fileStarter: {command: '${git}', parameters: 'update-index --chmod=-x -- ${filePath}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: true
- id: applyPatch
  name: 'fO: Apply Patch'
  fileStarter: {command: '${git}', parameters: 'apply ${fileOpen}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
- name: 'sf: MoveCommit'
  fileStarter: {command: '${git}', parameters: 'move-and-rename ${selectionFile}'}
  useForOpen: false
  waitUntilFinished: true
  filePattern: '*'
  forFilesNotDirectories: true
  requiresConfirmation: true
  confirmationMessage: ${selectionFile}
manuallyDeletedIds: [revealInNemo, openGnomeTerminal, openXfceTerminal, revealInNautilus,
  openInCmd, mergeDirectlyTo]
