<?xml version="1.0"?>
<ArrayOfSnippetIndexItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ActivateaRunningApplicationByName.snippet</File>
    <Title>Activate a Running Application by Name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Activates a running application using the name of the application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>AppActivate($applicationName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ActivateaRunningApplicationByProcess.snippet</File>
    <Title>Activate a Running Application by Process ID</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Activates a running application using the process ID of the application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processID As Integer

processID = Shell($applicationFileName$, AppWinStyle.NormalFocus)

AppActivate(processID)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\CaptureOutputfromaConsoleApplication.snippet</File>
    <Title>Capture Output from a Console Application</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Saves the output from a command console application to a string.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim consoleApp As New Process
With consoleApp
    .StartInfo.UseShellExecute = False
    .StartInfo.RedirectStandardOutput = True
    .StartInfo.FileName = $consoleExeFile$
    .Start()
    .WaitForExit()
End With

Dim output As String = consoleApp.StandardOutput.ReadToEnd()

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ChangetheForegroundandBackgroundTextColorsinaConsoleWindow.snippet</File>
    <Title>Change the Foreground and Background Colors in a Console Window</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Changes the background and text color of the console window.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.BackgroundColor = $background$
Console.ForegroundColor = $foreground$
Console.Clear()

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\CheckforCurrentVersionusingClickOnce.snippet</File>
    <Title>Check for Current Version using ClickOnce</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Checks for current version using ClickOnce.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>	If My.Application.IsNetworkDeployed Then

		$currentVersion$ = My.Application.Deployment.CurrentVersion
		$lastUpdate$ = My.Application.Deployment.TimeOfLastUpdateCheck

	End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\CheckForUpdates.snippet</File>
    <Title>Check for Update to ClickOnce Application</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Checks whether updates to the application are  available for download.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed() 
	If My.Application.Deployment.CheckForUpdate() Then

 	End If

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\CleartheConsoleWindow.snippet</File>
    <Title>Clear the Console Window</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Clears the console window.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.Clear()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\DeleteDatafromIsolatedStorage.snippet</File>
    <Title>Delete File from Isolated Storage</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Deletes file from isolated storage.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        $varName$.DeleteFile($pathToFile$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\DeterminetheAmountofIsolatedStorageAvailable.snippet</File>
    <Title>Determine the Amount of Isolated Storage Available. </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the Amount of Isolated Storage Available.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        Dim spaceAvailable = $varName$.Quota - $varName$.UsedSize
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\DeterminetheScopeofIsolatedStorage.snippet</File>
    <Title>Determine the Scope of Isolated Storage</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the scope of the isolated storage.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim scope = $varName$.Scope</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\DownloadFilesSynchronouslyClickOnce.snippet</File>
    <Title>Download Files Synchronously with ClickOnce</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Downloads files synchronously using ClickOnce.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        If My.Application.IsNetworkDeployed Then
            If Not(My.Application.Deployment.IsFileGroupDownloaded($fileDownloadGroup$)) Then
                 My.Application.Deployment.DownloadFileGroup($fileDownloadGroup$)
            End If
        End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\FindtheNamesofResourcesinanAssembly.snippet</File>
    <Title>Find the Names of Resources in an Assembly</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns a list of all the resources in an assembly.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$executingAssembly$ = Assembly.GetExecutingAssembly()
Dim resources() As string = $executingAssembly$.GetManifestResourceNames
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\LoadaCursorFilefromanAssembly.snippet</File>
    <Title>Load a Cursor File from an Assembly</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sets the cursor of a Windows form from a cursor file that is an embedded resource of the application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newCursor As New Cursor(My.Resources.ResourceManager.GetStream($cursorFilename$))
Me.Cursor = newCursor
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\LoadanAssemblyatRunTime.snippet</File>
    <Title>Load an Assembly at Run Time</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loads an assembly at run time.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$loadedAssembly$ = Assembly.LoadFile($fileName$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\MakeanAsynchronousMethodCall.snippet</File>
    <Title>Make an Asynchronous Method Call</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Makes an asynchronous method call using the BackgroundWorker component.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Private Sub startBackgroundTask()
        ' Execute the Background Task
        $backgroundWorkerInstance$.RunWorkerAsync()
    End Sub

    Private Sub $backgroundWorkerInstance$_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles $backgroundWorkerInstance$.DoWork
        ' This method will execute in the background thread created by the BackgroundWorker componet

    End Sub

    Private Sub $backgroundWorkerInstance$_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles $backgroundWorkerInstance$.RunWorkerCompleted
        ' This event fires when the DoWork event completes

    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ReadandWritefromtheConsoleWindow.snippet</File>
    <Title>Read and Write from the Console Window</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a prompt and then reads in the user request. It is run from a console application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Console.WriteLine($prompt$)
$inputFromConsole$ = Console.ReadLine()
Console.WriteLine($outputToConsole$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ReadCommandLineArguments.snippet</File>
    <Title>Read Command Line Arguments</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Iterates through the command line arguments.</Description>
    <Keywords>command line arguments,Command</Keywords>
    <Language>VB</Language>
    <Code>For Each argument In My.Application.CommandLineArgs

Next

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\ReadTextfromIsolateStorage.snippet</File>
    <Title>Read Text from Isolated Storage</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads the text from a file in isolated storage.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)

        Dim isolatedStream As New IsolatedStorageFileStream($fileName$, FileMode.Open, isolatedStore)

        Using reader As New StreamReader(isolatedStream)
            $inputText$ = reader.ReadToEnd
        End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\RetrieveanImagethatIsanApplicationResource.snippet</File>
    <Title>Retrieve an Image that Is an Application Resource</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Assigns an image resource in the My Application designer to the PictureBox1's Image property.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$pictureBox$.Image = My.Resources.$resourceName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\RetrieveaTextFilefromanAssembly'sResources.snippet</File>
    <Title>Retrieve a Text File from an Assembly's Resources</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the text from a file that is an embedded resource of an assembly.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim executingAssembly As Assembly = Assembly.GetExecutingAssembly
        Dim appStream As Stream = executingAssembly.GetManifestResourceStream($ResourceName$)
        Dim textStream As New StreamReader(appStream)
        Dim text As String = textStream.ReadToEnd</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\Savetextinisolatedstorage.snippet</File>
    <Title>Save Text in Isolated Storage</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a string to the assembly or user-isolated storage.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim $varName$ = IsolatedStorageFile.GetStore(IsolatedStorageScope.User Or IsolatedStorageScope.Assembly Or IsolatedStorageScope.Domain, Nothing, Nothing)
        Dim isoStream As New IsolatedStorageFileStream($fileName$, FileMode.Append, FileAccess.Write, isolatedStore)

        Using writer As New StreamWriter(isoStream)
		    writer.WriteLine($fileContents$)
	    End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\SendAnApplicationKeystrokes.snippet</File>
    <Title>Send Keystrokes to an Application </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sends keystrokes to an application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>SendKeys.SendWait($key$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\StopanApplication.snippet</File>
    <Title>Stop an Application</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Closes all the running instances of Notepad.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>	For Each proc In Process.GetProcessesByName($processName$)
		proc.CloseMainWindow()
	Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\UpdateApplicationusingClickOnce.snippet</File>
    <Title>Update Application Asynchronously using ClickOnce</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Updates ClickOnce application asynchronously.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed Then
	My.Application.Deployment.UpdateAsync()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\UpdateClickonceApplicationSynchronously.snippet</File>
    <Title>Update Application Synchronously using ClickOnce</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Update a ClickOnce application Synchronous.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If My.Application.IsNetworkDeployed Then
    My.Application.Deployment.Update()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\WriteMessagetotheApplicationLogUsingMy.snippet</File>
    <Title>Write a Message to the Application Log</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a message to the application log.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.Log.WriteEntry($messageText$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\application\WritetoaTextFileUsingMy.snippet</File>
    <Title>Write to a Text file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a message to the application event log.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($fileName$, $textContents$, $append$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\CompilerDirectiveIf.snippet</File>
    <Title>Build Only Selected Portions of the Source Code by Using #If</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the #If compiler directive to control which block of code is compiled into the assembly.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>#If $condition$ Then

#Else

#End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\DoLoopUntil(Condition).snippet</File>
    <Title>Do...Loop Until Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops until a condition is True.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do

Loop Until $Condition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\DoLoopWhile(Condition).snippet</File>
    <Title>Do...Loop While Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops while a condition is True.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do

Loop While $Condition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\DoUntil(Condition)Loop.snippet</File>
    <Title>Do Until...Loop Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops until a condition is True.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do Until $Condition$

Loop</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\DoWhile(Condition)Loop.snippet</File>
    <Title>Do While...Loop Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops while a condition is True.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Do While $Condition$

Loop</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\ForEachNext.snippet</File>
    <Title>For Each...Next Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops through a collection of items.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each $Variable$ As $ObjectType$ In $CollectionObject$

Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\ForNext(Integerloop).snippet</File>
    <Title>For...Next Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loops through a sequence of numbers.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For $Variable$ = $LowerBound$ To $UpperBound$

Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\IfElseEndIfStatement.snippet</File>
    <Title>If...Else...End If Statement </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts an If...Else...End If statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition$ Then

Else

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\IfElseIfElseEndIf.snippet</File>
    <Title>If...ElseIf...Else...End If Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts an If...ElseIf...Else...End If statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition1$ Then

ElseIf $Condition2$ Then

Else

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\IfEndifStatement.snippet</File>
    <Title>If..End If Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts an If..End If statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $Condition$ Then

End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\SelectCaseStatement.snippet</File>
    <Title>Select Case Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a Select Case statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Select Case $Variable$
    Case $Case1$

    Case $Case2$

    Case Else

End Select</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\conditionals and loops\While(Cond)EndWhile.snippet</File>
    <Title>While...End While Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a While...End While statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>While $Condition$

End While</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\DefineAnExceptionClass.snippet</File>
    <Title>Define An Exception Class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Provides a basic implementation for a new exception class.</Description>
    <Keywords>Exception,Error,Handling</Keywords>
    <Language>VB</Language>
    <Code>Public Class $ExceptionName$
    Inherits System.Exception

    Public Sub New(ByVal message As String)
        MyBase.New(message)
    End Sub

    Public Sub New(ByVal message As String, ByVal inner As Exception)
        MyBase.New(message, inner)
    End Sub
End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\ThrowanException.snippet</File>
    <Title>Throw an Exception </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Throws an Exception.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Throw New $exceptionType$($exceptionMsg$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\TryCatchEndTryStatement.snippet</File>
    <Title>Try...Catch...End Try Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a Try...Catch...End Try statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Catch ex As $ExceptionType$
	
End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\TryCatchFinallyEndTry.snippet</File>
    <Title>Try...Catch...Finally...End Try Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a Try...Catch...Finally...End Try statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Catch ex As $ExceptionType$

Finally

End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\TryFinallyEndTryStatement.snippet</File>
    <Title>Try...Finally...End Try Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a Try...Finally...End Try statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try

Finally

End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\exception handling\UsingStatement.snippet</File>
    <Title>Using Statement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a Using statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using $DisposeObject$ As $ObjectType$

End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\Addition(+)Operator.snippet</File>
    <Title>Define an Addition Operator (+)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines the addition (+) operator on a class. </Description>
    <Keywords>operators,overloading operators,overloading</Keywords>
    <Language>VB</Language>
    <Code>Public Shared Operator +(ByVal class1 As $ClassName$, ByVal class2 As $ClassName$) As $ClassName$

End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\CallAWindowsAPI.snippet</File>
    <Title>Define a Function to Call a Windows API</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a function to call a Windows API.</Description>
    <Keywords>pinvoke,declare,win32</Keywords>
    <Language>VB</Language>
    <Code>Declare Function $matchingCall$ Lib $dllName$ Alias $apiName$ ($parameters$) As Integer</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\ComparisonOperators.snippet</File>
    <Title>Define Comparison Operators (&gt; and &lt;)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines the comparison operators (&gt; and &lt;).</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Shared Operator &gt;(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator

    Public Shared Operator &lt;(ByVal left As $TypeName$, _
        ByVal right As $TypeName$) As Boolean

    End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\CTypeOperators.snippet</File>
    <Title>Define a CType Operator</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines the CType Operators on a class.</Description>
    <Keywords>overloading operators,CType,DirectCast,conversion operators,narrowing,Operator keyword</Keywords>
    <Language>VB</Language>
    <Code>Public Shared Narrowing Operator CType(ByVal initialData As $DataType$) As $ClassName$
          Return New $ClassName$()
        End Operator
        
        Public Shared Widening Operator CType(ByVal initialData As $ClassName$) As $DataType$
          Return $ReturnValue$
        End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\DeclareAnEvent.snippet</File>
    <Title>Declare an Event</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Declares an event.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$Scope$ Event $EventName$(ByVal sender As Object, ByVal e As $EventArgsType$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\DefaultProperty.snippet</File>
    <Title>Define a Default Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a default property or index property.</Description>
    <Keywords>Property,Index,Default</Keywords>
    <Language>VB</Language>
    <Code>Default Property $propertyName$(ByVal index As $indexType$) As $propertyType$
        Get
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Get
        Set(ByVal Value As $propertyType$)
            If $IndexIsValid$ Then
                
            Else
                Throw New ArgumentOutOfRangeException
            End If
        End Set
    End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\DefineAPrivateSub.snippet</File>
    <Title>Define a Sub that is Private</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Sub keyword to define a private method that does not return a value.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\DefineAProperty.snippet</File>
    <Title>Define a Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a Property with a backing field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
    Set(ByVal value As $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\DefineAPublicSub.snippet</File>
    <Title>Define a Sub that is Public</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Sub keyword to define a method that does not return a value.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\EqualityOperators.snippet</File>
    <Title>Define Equality Operators (= and &lt;&gt;)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines the equality Operators (= and &lt;&gt;).</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Shared Operator &lt;&gt;(ByVal left As $ClassName$, ByVal right As $ClassName$) As Boolean


    End Operator

    Public Shared Operator =(ByVal left As $ClassName$,ByVal right As $ClassName$) As Boolean


    End Operator</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\FuncWithGenericParam.snippet</File>
    <Title>Define a Function with Generic Parameters</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a Function that uses Generic parameters.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $FunctionName$(Of T)() As $ReturnType$
    Return $ReturnValue$
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\FuncWithVarParams.snippet</File>
    <Title>Define a Function with a Parameter Array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a Function that takes a variable number of parameters.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $MethodName$(ByVal ParamArray $ParamName$() As $ParamType$) As $ReturnType$
    For index = 0 To $paramName$.Length - 1

    Next
    Return $ReturnValue$
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\OverridableSub.snippet</File>
    <Title>Define a Sub that is Overridable</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines an Overridable Sub.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Overridable Sub $MethodName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\ProcedureWithReturn.snippet</File>
    <Title>Define a Function</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Function keyword to define a procedure that returns a value.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Function $FuncName$() As $ReturnType$

Return $ReturnValue$
End Function	</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\ProcWithoutReturn.snippet</File>
    <Title>Define a Sub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Sub keyword to define a procedure that does not return a value.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Sub $SubName$()

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\ReadOnlyProperty.snippet</File>
    <Title>Define a ReadOnly Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a ReadOnly Property with a backing field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public ReadOnly Property $PropertyName$() As $PropertyType$
    Get
        Return $PrivateVariable$ 
    End Get
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\SubToOverrideDispose.snippet</File>
    <Title>Define a Sub that Overrides Dispose</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Overrides the Dispose Function according to the Dispose Finalize pattern.</Description>
    <Keywords>IDisposable,Finalize,Dispose,release,resource</Keywords>
    <Language>VB</Language>
    <Code>    Protected Overrides Sub Dispose(ByVal disposing As Boolean)
        MyBase.Dispose(disposing)
        If disposing Then
            ' TODO: dispose managed state (managed objects).
        End If

        ' TODO: free unmanaged resources (unmanaged objects).
    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\SubWithByRefParam.snippet</File>
    <Title>Define a Sub with a ByRef parameter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a Sub with an argument whose value can be changed by the code in the method.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Sub $MethodName$(ByRef $ParameterName$ As $ParameterType$)

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\properties and procedures\WriteOnlyProperty.snippet</File>
    <Title>Define a WriteOnly Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a WriteOnly Property with a backing field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private $PrivateVariable$ As $PropertyType$
Public WriteOnly Property $PropertyName$() As $PropertyType$
    Set(ByVal value as $PropertyType$)
        $PrivateVariable$ = value
    End Set
End Property</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\DefineAnEnumeration.snippet</File>
    <Title>Define an Enumeration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines an enumeration.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Enum $EnumName$
     $Value1$
     $Value2$
End Enum</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\DefineAnEnumerationWithCustomValues.snippet</File>
    <Title>Define an Enumeration with Custom Values</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines an enumeration with specified integer values.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Enum $EnumName$
    $Enum1$ = $Value1$
    $Enum2$ = $Value2$
End Enum</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\DefineANewGenericType.snippet</File>
    <Title>Define a New Generic Type</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a Generic Type.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Class $TypeName$(Of T)

End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\DefineAnInterface.snippet</File>
    <Title>Define an Interface</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines an interface.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Interface I$InterfaceName$

End Interface</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\DefineAStructure.snippet</File>
    <Title>Define a Structure </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Defines a structure.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Structure $StructureName$
    Public $Member1Name$ As $Member1Type$
    Public $Member2Name$ As $Member2Type$
End Structure</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\GetTheStringValueOfAnEnumerationValue.snippet</File>
    <Title>Find the Name of an Enumeration Value</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gets the string name of an enumeration value.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim name As String = _
    System.Enum.GetName(GetType($EnumerationName$), $EnumValue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\common code patterns\types\ImplementTheDisposeFinalizePattern.snippet</File>
    <Title>Define a Class that Implements IDisposable</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Implements the Dispose Finalize pattern.</Description>
    <Keywords>IDisposable,Finalize,Dispose,release,resource</Keywords>
    <Language>VB</Language>
    <Code>Class $ClassName$
    Implements IDisposable

#Region "IDisposable Support"
    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\AddaNewRowToTypedDataTable.snippet</File>
    <Title>Add a new row to a typed DataTable</Title>
    <Author />
    <Description>Adds a new row to a typed DataTable </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newRow = CType($table$.NewRow(), $dataTableType$)
newRow.$column1$= $column1Value$
newRow.$column2$= $column2Value$
$table$.Rows.Add(newRow)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CalltheExecuteNonQueryMethodofaDataCommand.snippet</File>
    <Title>Call the ExecuteNonQuery Method of a SqlCommand</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Calls ExecuteNonQuery on an existing command.  Wraps the execution in a try/finally block to return the connection object to it's previous state</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        Dim rowCount As Integer
        Dim previousConnectionState As ConnectionState
        previousConnectionState = $conn$.State
        Try
            If $conn$.State = ConnectionState.Closed Then
                $conn$.Open()
            End If
            rowCount = $cmd$.ExecuteNonQuery()

        Finally
            If previousConnectionState = ConnectionState.Closed Then
                $conn$.Close()
            End If
        End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CalltheExecuteReaderMethodofaDataCommand.snippet</File>
    <Title>Call the ExecuteReader Method of a SqlCommand</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Fetches data from a database using the SqlCommand.ExecuteReader method of an existing data command.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader As SqlDataReader
Dim previousConnectionState As ConnectionState = $conn$.State
Try
If $conn$.State = ConnectionState.Closed Then
	$conn$.Open()
End If
reader = $cmd$.ExecuteReader()
Using reader
	While reader.Read
		' Process SprocResults datareader here.
		$ProcessSprocResult$
	End While
End Using
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CalltheExecuteScalarMethodofaDataCommand.snippet</File>
    <Title>Call the ExecuteScalar Method of a SqlCommand</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Executes a SQL statement that returns a single value using the SqlCommand.ExecuteScalar method of an existing data command.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim result As Object
Dim previousConnectionState As ConnectionState = $conn$.State
Try
	If $conn$.State = ConnectionState.Closed Then
		$conn$.Open()
	End If
	result = $cmd$.ExecuteScalar()
Finally
    If previousConnectionState = ConnectionState.Closed Then
        $conn$.Close()
    End If
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\ConvertBindingSourceCurrenttoTypedRow.snippet</File>
    <Title>Convert BindingSource.Current to a specific row in a DataTable</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gets the current row within a binding source and converts it to the specific row.  Recomended method for capturing the current, rather than using BindingSource.Position which may return a different row based on the sorting of the DataView</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim row As $rowType$
row = CType(CType(Me.$bindingSource$.Current, DataRowView).Row, $rowType$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateaDataRelation.snippet</File>
    <Title>Create a DataRelation</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a data relation between two data tables in a dataset.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $relationObjectName$ As New DataRelation($RelationName$, _
		$DataSet$.Customers.Columns($ColumnName$), _
		$DataSet$.Orders.Columns($ColumnName$))

$DataSet$.Relations.Add($relationObjectName$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateanExpressionColumn.snippet</File>
    <Title>Create an Expression Column</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a DataColumn object and sets the DataColumn.Expression property to calculate the order total.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $ExpressionColumn$ As New DataColumn()
$ExpressionColumn$.ColumnName = "$ColumnName$"
$ExpressionColumn$.DataType = GetType($ColumnDataType$)
$ExpressionColumn$.Expression = "$Expression$"
$DataSet$.$DataTable$.Columns.Add($ExpressionColumn$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateParameterizedSelectCommand.snippet</File>
    <Title>Create a Parameterized SELECT Command</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Constructs a command object for executing a Select statement with parameters.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $cmd$ As New SqlCommand
$cmd$.CommandType = CommandType.Text
$cmd$.CommandText = "$SQL$"
$cmd$.Connection = $conn$
' Create a SqlParameter for each parameter in the stored procedure.
Dim $parameter1$ As New SqlParameter("$sqlParameterName$", $parameterValue$)
$cmd$.Parameters.Add($parameter1$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateParameterizedStoredProcedureCommand.snippet</File>
    <Title>Create a Parameterized Stored Procedure</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Constructs a command object for executing a stored procedure with parameters.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $sprocCmd$ As New SqlCommand()
$sprocCmd$.Connection = $conn$
$sprocCmd$.CommandType = CommandType.StoredProcedure
$sprocCmd$.CommandText = "$procedureName$"

' Create a SqlParameter for each parameter in the stored procedure.
Dim $firstParameter$ As New SqlParameter("$columnName$", $value$)
$sprocCmd$.Parameters.Add($firstParameter$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateSqlExpressConnection.snippet</File>
    <Title>Create a local SQLConnection to SQL Express</Title>
    <Author>Microsoft</Author>
    <Description>Creates a SQL Connection providing replacements for the typical connection name/value pairs for a SQL Express Connection using User Instance=True</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=.\SQLEXPRESS;AttachDbFilename=$dataDirectory$\$dataBaseName$.mdf;Integrated Security=True;User Instance=True"
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\CreateSqlServerConnection.snippet</File>
    <Title>Create a Server based SQLConnection to SQL Server</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a SQL Connection providing replacements for the typical connection name/value pairs</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $conn$ As New SqlConnection()
$conn$.ConnectionString = "Data Source=$serverName$;Initial Catalog=$dataBaseName$;Persist Security Info=True;User ID=$userId$;Password=$password$"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\ExtendTableAdapter.snippet</File>
    <Title>Extend a TableAdapter w/Partial Classes</Title>
    <Author>Microsoft</Author>
    <Description>Extends a TableAdapter using partial classes.  Includes the namespace required to reference existing TableAdapters</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Namespace $Namespace$TableAdapters
    Partial Public Class $TableAdapter$

    End Class
End Namespace
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\ImplementDataTryCatchBlocks.snippet</File>
    <Title>Implement Data Try/Catch Blocks </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Implements a Try/Catch block that handles Exception, DataException, and all the exceptions that derive from DataException.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Try
    $tryCode$
Catch concurrencyEx As DBConcurrencyException
    Throw concurrencyEx 
Catch constraintEx As ConstraintException
    Throw constraintEx
Catch deletedRowEx As DeletedRowInaccessibleException
    Throw deletedRowEx
Catch duplicateNameEx As DuplicateNameException
    Throw duplicateNameEx
Catch inRowChangingEx As InRowChangingEventException
    Throw inRowChangingEx
Catch invalidConstraintEx As InvalidConstraintException
    Throw invalidConstraintEx
Catch invalidExpressionEx As InvalidExpressionException
    Throw invalidExpressionEx
Catch missingPrimaryEx As MissingPrimaryKeyException
    Throw missingPrimaryEx
Catch noNullEx As NoNullAllowedException
    Throw noNullEx
Catch readOnlyEx As ReadOnlyException
    Throw readOnlyEx
Catch rowNotInTableEx As RowNotInTableException
    Throw rowNotInTableEx
Catch strongTypingEx As StrongTypingException
    Throw strongTypingEx
Catch typedDataSetEx As TypedDataSetGeneratorException
    Throw typedDataSetEx
Catch versionNotFoundEx As VersionNotFoundException
    Throw versionNotFoundEx
Catch dataEx As DataException
    Throw dataEx
Catch ex As Exception
    Throw ex
Finally
    $finallyCode$
End Try
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\ReadAccessDataintoaDataset.snippet</File>
    <Title>Read Access Data into a Dataset</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loads the data from one table in an Access database into a DataSet object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim conn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=$AccessFileName$;Persist Security Info=False"
Dim cmd As String = $SQLString$
Dim adapter As New OleDbDataAdapter(cmd, conn)
Dim topics As New DataSet
adapter.Fill(topics)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\database\ReturnTableAdapterOutputParameters.snippet</File>
    <Title>Return Output Parameter for a TableAdapter Query</Title>
    <Author>Microsoft</Author>
    <Description>TableAdapter methods that "Retun No Value" use ExecuteNonQuery which returns the rows affected.  This Snippet returns the value from one of the command parameters on a TableAdapter.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function $methodName$() As $dataType$
	Me.$existingMethod$()
	Return Me._commandCollection($commandIndex$).Parameters($parameterIndex$).Value
End Function
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qCount.snippet</File>
    <Title>Count query results</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Counts the number of results from a query.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$
                    
                 Dim count = $queryResult$.Count</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qFrom.snippet</File>
    <Title>From query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query with the most compact syntax possible.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qFromOBSelect.snippet</File>
    <Title>From...Order By...Select query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query with From, Order By, and Select clauses.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qFromSelect.snippet</File>
    <Title>From...Select query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query with From and Select clauses.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qFromWSelect.snippet</File>
    <Title>From...Where...Select query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query with From, Where, and Select clauses.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField$ $condition$ _
                    Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\qIterate.snippet</File>
    <Title>Iterate over query results</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query and demonstrates consumption of that query in a subsequent For Each statement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$

                     For Each $iterationVar$ In $queryResult$
                         ' sum = sum + $item$.$field2$                   
                     Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Filter with 'Where'\qFilt.snippet</File>
    <Title>Filter by a single field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that filters the results based on a single condition on one field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField$ $condition$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Filter with 'Where'\qFiltDiff.snippet</File>
    <Title>Filter by fields not selected</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that filters by fields not selected in the results.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField1$ $condition1$ And $item$.$whereField2$ $condition2$ _
                    Select $item$.$selectedField$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Filter with 'Where'\qFiltFunc.snippet</File>
    <Title>Filter by a function call</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that filters by a call to a function.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $functionCall$($item$.$field$, $comparisonValue$) $condition1$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Filter with 'Where'\qFiltMult.snippet</File>
    <Title>Filter by multiple fields</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that filters the results based on conditions on multiple fields.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$whereField1$ $condition1$ And $item$.$whereField2$ $condition2$ _
                    Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Filter with 'Where'\qQueryDist.snippet</File>
    <Title>Distinct results</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that returns distinct rows of data.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Where $item$.$field1$ $condition1$ _
                    Select $item$.$field2$ _
                    Distinct</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qAggregate.snippet</File>
    <Title>Aggregate Into Count() and Sum()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses an aggregate to count the number of fruits and sum the number of characters.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                  Into $aggregateName$ = $groupingCondition$(), $aggregateName2$ = $groupingCondition2$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qAggregateAvg.snippet</File>
    <Title>Aggregate Into Average()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses an aggregate to calculate the average char count of a fruit name.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                         Into $groupingCondition$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qAggregateMax.snippet</File>
    <Title>Aggregate Into Max()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses an aggregate to calculate the maximum number of characters in a fruit name.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = Aggregate $item$ In $dataSource$ _
                     Into $groupingCondition$($item$.$field$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qGroup.snippet</File>
    <Title>Group By Into Count()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that groups results and returns a count of how many items are in each group.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Group By $item$.$field$ Into $groupingCondition$() _
                    Select $field$, $groupingCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qGroupRename.snippet</File>
    <Title>Group By and rename the group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that groups the results and renames the group.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Group By $groupName$ = $item$.$field$ Into $aggregateName$ = $groupingCondition$() _
                    Select $groupName$, $aggregateName$ _
                    Order By $aggregateName$ Descending, $groupName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Grouping\qGroupSum.snippet</File>
    <Title>Group By Count() and Sum()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that groups results, and returns a count of how many items are in each group and a sum of a specific field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                  Group By $groupName$ = $item$.$field$ _
                  Into $aggregateName$ = $groupingCondition$(), $aggregateName2$ = $groupingCondition2$($item$.$field$) _
                  Select $aggregateName$, $groupName$, $aggregateName2$ _
                  Order By $aggregateName$ Descending, $groupName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Joining\qJoinExpArray.snippet</File>
    <Title>Join (explicit) on an array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that matches items against elements in an array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                   Join $length$ In New Integer() { 4, 5 } _
                                   On $item$.$field1$ Equals $length$ _
                   Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Joining\qJoinImpArray.snippet</File>
    <Title>Join (implicit) on an array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that matches items against elements in an array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$, _
                                   $length$ In New Integer() {4, 5} _
                                   Where $item$.$field1$ = $length$ _
                   Select $item$.$field1$, $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Joining\queGroJo.snippet</File>
    <Title>Group results from 2 sources and retrieve the Count</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that groups results from 2 different sources, and returns a count of items in each group.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource1$() As $dataType1$ = {"4", "5", "6"}

                 Dim $queryResult$ = From $item1$ In $dataSource1$ _
                             Group Join $item2$ In $dataSource2$ _
                                   On $item2$.$groupfield$ Equals $item1$ _
                                   Into Group, $aggregate$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Joining\queGroJoName.snippet</File>
    <Title>Group Join - Named Group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that groups results from 2 different sources, and returns a count of items in each group. A name is given to the groups</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource1$() As $dataType1$ = {"4", "5", "6"}

                 Dim $queryResult$ = From $item1$ In $dataSource1$ _
                             Group Join $item2$ In $dataSource2$ _
                                   On $item2$.$groupfield$ Equals $item1$ _
                                   Into $groupName$ = Group, $aggregate$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Sort with 'Order By'\qSortAsc.snippet</File>
    <Title>Sort - Ascending</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that sorts results in ascending order, based on a specified field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $item$.$field2$ _
                    Order By $field1$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Sort with 'Order By'\qSortDesc.snippet</File>
    <Title>Sort - Descending</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that sorts results in descending order, based on a specified field.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$ Descending</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Sort with 'Order By'\qSortDiff.snippet</File>
    <Title>Sort by fields not selected</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that sorts by fields not selected in the results.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Order By $item$.$field1$ _
                     Select $item$.$field2$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Sort with 'Order By'\qSortFilt.snippet</File>
    <Title>Sort and filter a query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that is sorted and filtered.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$.$whereField$ $condition$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Sort with 'Order By'\qSortMult.snippet</File>
    <Title>Sort by multiple fields</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a query that sorts the results by multiple fields.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                     Select $item$.$field1$, $item$.$field2$ _
                     Order By $field1$, $field2$ Descending</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Take and Skip\qSkip.snippet</File>
    <Title>Skip</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query that skips the first n elements of a set of ordered results.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip $skipCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Take and Skip\qSkipTake.snippet</File>
    <Title>Skip and Take</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query that skips the first n elements and then takes the next m elements of a set of ordered results.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip $skipCount$ _
                    Take $takeCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Take and Skip\qSkipW.snippet</File>
    <Title>Skip While</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query that Skips While a specific condition is true.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Skip While $item$.$skipField$ $skipCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Take and Skip\qTake.snippet</File>
    <Title>Take</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query that takes the first n elements of a set of ordered results.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    Take $takeCount$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Query - Take and Skip\qTakeW.snippet</File>
    <Title>Take While</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query that Takes While a specific condition is true.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Order By $item$.$orderField$ $orderDirection$ _
                    take While $item$.$takeField$ $takeCondition$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Different Sources\qArray.snippet</File>
    <Title>Query over an array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query over an array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$ = New $dataSourceType$() {50, 42, 76, 93, 65, 51, 79}

                 Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$ $condition$ _
                     Order By $item$ _
                     Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Different Sources\qArrayIn.snippet</File>
    <Title>Query over an inline array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query over an array that is declared inside the query.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In New Integer() {50, 42, 76, 93, 65, 51, 79} _
                     Where $item$ $condition$ _
                     Order By $item$ _
                     Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Different Sources\qCollection.snippet</File>
    <Title>Query over a collection</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query over a collection.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$ As New $dataSourceType$
        
                 ' populate your collection here.
                 ' $dataSource$.Add( ... )

                 Dim $queryResult$ = From $item$ In $dataSource$ _
                              Select $item$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Different Sources\qQueryQ.snippet</File>
    <Title>Query over a query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A query over the results from another query.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult1$ = From $item1$ In $dataSource$ _
                             Where $item1$.$filterField1$ $filterCondition1$ _
                             Select $item1$.$field1$, $item1$.$field2$

        Dim $queryResult2$ = From $item2$ In $queryResult1$ _
                     Where $item2$.$filterfield2$ $filterCondition2$ _
                     Select $item2$.$field3$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Query Results\qConsole.snippet</File>
    <Title>Display results in the Console window</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays the results of a query in the Console window.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

                 For Each $iterationVar$ In $queryResult$
                     Console.WriteLine($iterationVar$.$field1$ &amp; " " &amp; $iterationVar$.$alias$)
                 Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Query Results\qLoop.snippet</File>
    <Title>For Each over the results of a query</Title>
    <Author>Microsoft Corporation</Author>
    <Description>A For...Each demonstrating how to iterate over the results of the query.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $dataSource$() As $dataSourceType$ = {50, 42, 76, 93, 65, 51, 79, 97, _
                                   44, 65, 70, 83, 81, 52}

        Dim $queryResult$ = From $item$ In $dataSource$ _
                     Where $item$ &gt; (From avgScore In $dataSource$).Average _
                     Order By $item$ _
                     Select $item$

        For Each $iterationVar$ In $queryResult$
            Console.WriteLine("The following score was above average: " &amp; $iterationVar$)
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Query Results\qWebForm.snippet</File>
    <Title>Display query results in a WebForm grid</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays the results of a query in a WebForm DataGridView control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

        ' This code assumes a GridView instance exists on your webform.     
        $gridview$.DataSource = $queryResult$.ToList()
        $gridview$.DataBind()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\LINQ Queries\Using Query Results\qWinForm.snippet</File>
    <Title>Display query results in a WinForm grid</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays the results from a query in a WinForm DataGridView control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $queryResult$ = From $item$ In $dataSource$ _
                    Select $item$.$field1$, $alias$ = $item$.$field2$ _
                    Order By $field1$

        ' This assumes the gridview is already on your form.
        $gridview$.DataSource = $queryResult$.ToList()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\EmbedQueryInsideXmlElement.snippet</File>
    <Title>Embed a query inside an XElement</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Embed a query inside an XElement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim y = &lt;$Root$&gt;
                    &lt;%= From i in $QueryExpr$ _
                        where i $QueryExpr2$ _
                        Select &lt;$Result$&gt;
                                   &lt;%= i %&gt;
                               &lt;/$Result$&gt; _
                               %&gt;
                &lt;/$Root$&gt;

      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\InferaSchemafromanXmlFile.snippet</File>
    <Title>Infer and create a schema from an XML file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Infers a schema from an existing XML file and saves it as a seperate schema file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim infer = New XmlSchemaInference()
Dim sc = New XmlSchemaSet()
sc = infer.InferSchema(New XmlTextReader($xmlFile$))

Dim w = XmlWriter.Create(New StreamWriter($XsdFile$))
For Each schemafile As XmlSchema In sc.Schemas()
    schemafile.Write(w)
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\NavigatewithXpathNavigator.snippet</File>
    <Title>Navigate by using XPathNavigator</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Iterates through the nodes of an XDocument by using the XPathNavigator.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim nav = $xmlDoc$.CreateNavigator()

        nav.MoveToChild(XPathNodeType.Element)

        Dim nodeIterator = nav.SelectChildren(XPathNodeType.Element)
        While nodeIterator.MoveNext
            ' Interact with each child node here.
        End While</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Create\CreateXHTML.snippet</File>
    <Title>Create XHTML by using XML literals</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates XHTML by using XML literals.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim inputXML = $inputXML$
Dim xhtml = &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;title&gt;Enter title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Book Collection&lt;/p&gt;
&lt;table border="1"&gt;
    &lt;tr&gt;
      &lt;th align="left"&gt;Book&lt;/th&gt;
      &lt;th align="left"&gt;Author&lt;/th&gt;
    &lt;/tr&gt;
    &lt;%= From i in $AxisProp$ _
        Select _
        &lt;tr&gt;
                 &lt;td&gt;&lt;%= $Book$ %&gt; &lt;/td&gt;
                 &lt;td&gt;&lt;%= $Author$ %&gt; &lt;/td&gt;                  
               &lt;/tr&gt; _
        %&gt;
    
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Create\CreateXMLDocument.snippet</File>
    <Title>Create an XML document</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Create an XML document that has embedded expressions.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
        Dim xmllit = &lt;?xml version="1.0"?&gt;
                      &lt;$Root$ $Attr1$="$value$"&gt;
                                      &lt;%= $Expr$ %&gt;
                    &lt;$Child$ $Attr2$=&lt;%= $StrExpr$ %&gt;/&gt;
                &lt;/&gt;
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Create\CreateXMLElement.snippet</File>
    <Title>Create an XML element</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates an XML element that has embedded expressions.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim xmllit = &lt;$Root$ $Attr1$="$value$"&gt;
                                      &lt;%= $Expr$ %&gt;
                    &lt;$Child$ $Attr2$=&lt;%= $StrExpr$ %&gt;/&gt;
                &lt;/&gt;
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Query\FindChildElementsinanXMLFile.snippet</File>
    <Title>Find all child elements in XML data by using the element name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Locates all child elements in an XML file by element name.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim childElements = $XmlVariable$.&lt;$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Query\FindDescElementsinanXMLFile.snippet</File>
    <Title>Find all descendant elements in XML data by using the element name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Locates all descendant elements in an XML file by element name.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim childElements = $XmlVariable$...&lt;$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Query\PrintXmlAxisPropertyResults.snippet</File>
    <Title>Print specific child elements in XML data to the console</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Prints specific child elements in XML data to the console.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each item In $XELEM$.$AxisExpr$
            Console.WriteLine(item)
        Next
      </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Query\ReturnElemNodesinanXMLFile.snippet</File>
    <Title>Return all elements in an XDocument</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns all elements in an XDocument.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$xmlDoc$.Descendants()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Query\SelectNthNodeInXMLFile.snippet</File>
    <Title>Find Nth instance of an element in an XML file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Finds the Nth instance of an element in an XML file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim element = XElement.Load($FileName$)
      Dim result = element.$NodePath$$Indexer$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Read\ReadClassDatafromanXMLFile.snippet</File>
    <Title>Read class data from an XML file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads class data that was previously written to an XML file by using the XmlSerializer class.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader = New XmlSerializer(GetType($ClassType$))
        Dim file = New StreamReader($filename$)
        Dim fileData = CType(reader.Deserialize(file), $ClassType$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Read\ReadXMLfromaFile.snippet</File>
    <Title>Read XML from a file by using the XmlTextReader</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the XMLTextReader class to extract the contents from an XML file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim reader = New XmlTextReader($filename$)
Dim readElement = XElement.Load(reader)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Read\ReadXMLfromURLSample.snippet</File>
    <Title>Read XML from a URL
      </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads XML data from a location defined as a URL.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim myUrl As String = $Url$
Dim $document$ = XDocument.Load(myUrl)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Update\AddanElementtoXMLData.snippet</File>
    <Title>Add an element to an XML document</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds a new element to an XDocument instance.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code> $XmlDoc$.Add(&lt;$Element$&gt;$Value$&lt;/$Element$&gt;)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Update\AddNewElementtoNthElement.snippet</File>
    <Title>Add new element to the Nth element in XML data</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds a new XElement to the Nth XElement in XML data</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$XmlEle$.&lt;$AxisProp$&gt;($val$).Add($Element$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Update\InsertNewAttributeForSpecificChildElements.snippet</File>
    <Title>Insert a new attribute for specific child elements</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Inserts a new attribute for specific child elements.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim elem = $Xelem$
        For Each item In $AxisExpr$
            item.@$newAttr$ = "$newVal$"
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Update\UpdateContentOfChildElements.snippet</File>
    <Title>Update content of child elements</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Updates the content of child elements.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim elem = $Xelem$
        For Each item In $AxisExpr$
            item.SetValue("$newVal$")
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Write\WriteClassDatatoanXMLFile.snippet</File>
    <Title>Write class data to an XML file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes the data from a class to an XML file by using the XmlSerializer class.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim writer As New XMLSerializer(GetType($Class$))
Dim file As New StreamWriter($filename$)
writer.Serialize(file, $dataInstance$)
file.Close()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\data\xml\XML - Write\WriteXmlElementtoFile.snippet</File>
    <Title>Write an XML element to file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes an XML element to a file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$XmlEle$.Save($File$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\ConverttoStronglyTypedArrayUsingToArray.snippet</File>
    <Title>Convert an ArrayList to a Strongly Typed Array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts an ArrayList to a strongly typed array using ToArray(Type)</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newArray() As $Datatype$ = CType($ExistingArray$.ToArray(GetType($Datatype$)), $Datatype$())</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\CreateAStronglyTypedCollection.snippet</File>
    <Title>Create a list with items of a single type.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a collection to hold a specific type of items.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Backing storage -- a generic list
Dim $storageVar$ As New List(Of $type$)() 

' Add an item to the Collection
$storageVar$.Add($item$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\CreateAStronglyTypedDictionary.snippet</File>
    <Title>Create a keyed collection with one item type.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a dictionary to hold specific types of items indexed by key.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Backing storage -- a generic dictionary
Dim $storageVar$ As New Dictionary(Of $keyType$, $itemType$)

' Add items to the dictionary
$storageVar$.Add( $keyValue1$ , $value1$)
$storageVar$.Add( $keyValue2$ , $value2$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\CreateAStronglyTypedSortedDictionary.snippet</File>
    <Title>Create a sorted dictionary.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a sorted dictionary to hold a specific type of items.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Backing storage -- a generic dictionary
        Dim $storageVar$ As New SortedDictionary(Of $keyType$, $itemType$)

        ' Add items to the dictionary
        $storageVar$.Add($keyValue1$, $itemValue1$)
        $storageVar$.Add($keyValue2$, $itemValue2$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\DefineATypeComparerForSorting.snippet</File>
    <Title>Define a type comparer to be used in sorting routines.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>     Public Class $compareID$
        Inherits Comparer(Of $compType$)

        Public Overrides Function Compare(ByVal $param1$ As $compType$, ByVal $param2$ As $compType$) As Integer
            If $param1$ &lt; $param2$ Then
        ' result = &lt;0 if param1 &lt; param2
        Return -1
            ElseIf $param1$ &gt; $param2$ Then
        ' result = &gt;0 if param1 &gt; param2
        Return 1
            Else
        ' result = 0 if param1 = param2
        Return 0
            End If
        End Function
    End Class</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\IndexIntoStronglyTypedDictionaryByKey.snippet</File>
    <Title>Index into a strongly typed dictionary using a key.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Indexes into strongly typed dictionary by using a key.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim $itemVar$ As $itemType$ = $storageVar$.Item($key$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\InitializeanArray.snippet</File>
    <Title>Initialize a One-Dimensional Array </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Initializes a one-dimensional array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oneDimArray() As Integer = {$OneD$}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\IteratingThroughACollection.snippet</File>
    <Title>Iterate through a collection.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Iterates through specific item types in a collection.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Iterate through a collection
        For Each $itemVar$ As $itemType$ In $colVar$

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\IteratingThroughADictionary.snippet</File>
    <Title>Iterate through a dictionary.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Iterates through all the items in a dictionary.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        ' Iterate through a dictionary
        For Each $itemVar$ As $itemType$ In $dicVar$.Values

        Next
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\IteratingThroughASortedDictionaryByKey.snippet</File>
    <Title>Iterate through a sorted dictionary by key.</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Iterates through all the items in a dictionary based on the sorted list of keys.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code> ' Loop through the items based on key
        For Each $keyVar$ As $keyType$ In $dicVar$.Keys
            Dim $itemVar$ As $itemType$ = $dicVar$.Item($keyVar$)

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\LocateanElementinanArray.snippet</File>
    <Title>Locate an Element in an Array </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Finds the index of a given element in an array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim index As Integer
        index = Array.IndexOf($arrayName$, $SearchString$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\collections and arrays\SortAnArray.snippet</File>
    <Title>Sort An Array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Declares an array of String objects, populates it, and then sorts it alphabetically.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim animals() As String = $InitialValues$
Array.Sort(animals)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\byteImage.snippet</File>
    <Title>Convert a Byte() to an Image</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts a Byte() to an image. Byte arrays are often how image information is stored in a database</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function GetImageFromByteArray(ByVal $inputArray$ As Byte()) As Bitmap
                  Return CType(Bitmap.FromStream(New IO.MemoryStream($inputArray$)), Bitmap)
              End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertanArrayofBytesintoaString.snippet</File>
    <Title>Convert an Array of Bytes into a String</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Convert an Array of Bytes into a String</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Function ConvertByteArrayToString(ByVal byteArray As Byte()) As String
    Dim enc As Encoding = $Encoding$
    Dim text As String = enc.GetString(byteArray)
    Return text
End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertaNumbertoaHexaDecimalString.snippet</File>
    <Title>Convert a Number to a Hexadecimal String</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns the hexadecimal representation of an integer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim hexString As String = $Number$.ToString("X")</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertaNumbertoaOctalString.snippet</File>
    <Title>Convert a Number to a Octal String</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns the octal string representation of an integer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim octal As String = Oct($Number$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertaStringtoByteArray.snippet</File>
    <Title>Convert a String to a Byte Array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts a string to a byte array.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>dim bytes as Byte() = Encoding.Unicode.GetBytes($SampleString$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertBetweenHiraganaandKatakanaCharacters.snippet</File>
    <Title>Convert between Hiragana and Katakana Characters (Japanese Only)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts between Hiragana and Katakana characters in a String.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Katakana to Hiragana (Japanese Only).
Dim hString As String = StrConv($Katakana$, _
    VbStrConv.Hiragana)
' Convert Hiragana to Katakana (Japanese Only).
Dim kString As String = StrConv($Hiragana$, _
    VbStrConv.Katakana)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertBetweenSimplifiedChineseandTraditionalChineseCharacters.snippet</File>
    <Title>Convert between Simplified Chinese and Traditional Chinese Characters</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts between Simplified Chinese and Traditional Chinese characters in a String.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Simplified Chinese to Traditional Chinese.
 	Dim tString As String = StrConv($Simplified$, _
    VbStrConv.TraditionalChinese)
' Convert Traditional Chinese to Simplified Chinese.
	Dim sString As String = StrConv($Traditional$, _
    VbStrConv.SimplifiedChinese)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ConvertBetweenWideandNarrowCharacters.snippet</File>
    <Title>Convert between Wide and Narrow Characters</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts between Wide and Narrow characters in Strings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Convert Wide to Narrow.
Dim nString As String = StrConv($Wide$, VbStrConv.Narrow)
' Convert Narrow to Wide.
Dim wString As String = StrConv($Narrow$, VbStrConv.Wide)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\DeterminetheSpanbetweenTwoDates.snippet</File>
    <Title>Determine the Span between Two Dates </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Calculates the difference in days between two dates and also constructs a TimeSpan value for that difference.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oldDate As Date = $dateLiteral$
Dim newDate As Date = $dateLiteral2$

' You can also determine the difference in times in other units.
Dim difference As TimeSpan = newTime - oldTime
Dim differenceInDays As Double = difference.TotalDays</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\DeterminetheSpanbetweenTwoTimes.snippet</File>
    <Title>Determine the Span between Two Times </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Calculates the difference in seconds between two times in the same day, and also constructs a TimeSpan value for that difference.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim oldTime As Date = $timeValue$
Dim newTime As Date = $timeValue2$

' You can also determine the difference in times in other units.
Dim difference As TimeSpan = newTime - oldTime
Dim differenceInSeconds As Double = difference.TotalSeconds
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\GenerateMultilineStringLiterals.snippet</File>
    <Title>Generate Multiline String Literals </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Constructs a string literal that is three lines long.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim longString As String
longString = _
    "This is the first line of my string." &amp; Environment.NewLine &amp; 
    "This is the second line of my string." &amp; Environment.NewLine &amp;
    "This is the third line of my string."</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\imageByte.snippet</File>
    <Title>Convert an Image to a Byte()</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts an Image to a Byte(). Byte arrays are often how image information is stored in a database</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Public Function GetByteArrayFromImage(ByVal $inputImage$ As Bitmap) As Byte()
        Dim $tempStream$ As New System.IO.MemoryStream
        $inputImage$.Save($tempStream$, Imaging.ImageFormat.Bmp)
        Dim $outputByteArray$(CInt($tempStream$.Length - 1)) As Byte
        $tempStream$.Seek(0, System.IO.SeekOrigin.Begin)
        $tempStream$.Read($outputByteArray$, 0, CInt($tempStream$.Length))
        Return $outputByteArray$
    End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\ParseanEmailAddress.snippet</File>
    <Title>Parse an E-mail Address</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns the user name and provider name from an e-mail address.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim emailParts() As String
Dim user As String
Dim provider As String
emailParts = $email$.Split("@".ToCharArray, 2)
If emailParts.Length = 2 Then
    user = emailParts(0)
    provider = emailParts(1)
Else
    ' Email address is not valid. The expected format is user@provider.*
    user = String.Empty
    provider = String.Empty
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\datatypes\RemovePartsofaString.snippet</File>
    <Title>Remove Parts of a String </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Removes all occurrences of one string from another string.</Description>
    <Keywords>String,Replace</Keywords>
    <Language>VB</Language>
    <Code>Dim withParts As String = $StringWithParts$
Dim withoutParts As String = withParts.Replace($ToRemove$, "")</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CompareTwoFiles.snippet</File>
    <Title>Compare Two Files</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Compares two files.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Function CompareFiles(ByVal file1 As String, ByVal file2 As String) As Boolean
        ' Set to true if the files are equal; false otherwise
        Dim filesAreEqual As Boolean = False

        With My.Computer.FileSystem
            ' Ensure that the files are the same length before comparing them line by line.
            If .GetFileInfo(file1).Length = .GetFileInfo(file2).Length Then
                Using file1Reader As New FileStream(file1, FileMode.Open), _
                      file2Reader As New FileStream(file2, FileMode.Open)
                    Dim byte1 As Integer = file1Reader.ReadByte()
                    Dim byte2 As Integer = file2Reader.ReadByte()
                    ' If byte1 or byte2 is a negative value, we have reached the end of the file.
                    While byte1 &gt;= 0 AndAlso byte2 &gt;= 0
                        If (byte1 &lt;&gt; byte2) Then
                            filesAreEqual = False
                            Exit While
                        Else
                            filesAreEqual = True
                        End If
                        ' Read the next byte.
                        byte1 = file1Reader.ReadByte()
                        byte2 = file2Reader.ReadByte()
                    End While
                End Using
            End If
        End With

        Return filesAreEqual
    End Function</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CopyaDirectory.snippet</File>
    <Title>Copy a Directory</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Copies a directory and all its files and subdirectories.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CopyDirectory($sourceDir$, $destDirectory$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CopyaFile.snippet</File>
    <Title>Copy a File </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Copies the file Source.txt to a second file, Copy.txt.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CopyFile($Source$, $Destination$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CreateaFile.snippet</File>
    <Title>Create a File </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a new file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($Filename$, String.Empty, False)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CreateaFolder.snippet</File>
    <Title>Create a Folder </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a new folder on the computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.CreateDirectory($folderName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\CreateaTemporaryFilename.snippet</File>
    <Title>Create a Temporary File Name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a name for a temporary file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileName As String 
fileName = My.Computer.FileSystem.GetTempFileName()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\DeleteFiles.snippet</File>
    <Title>Delete a File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Deletes a file after confirming deletion with the user.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.DeleteFile($Filename$, FileIO.UIOption.AllDialogs, FileIO.RecycleOption.SendToRecycleBin)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\DetermineifaFileExists.snippet</File>
    <Title>Determine if a File Exists</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sets a Boolean variable indicating whether a specified file exists.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileExists As Boolean 
fileExists = My.Computer.FileSystem.FileExists($filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\DetermineifaFolderExists.snippet</File>
    <Title>Determine if a Folder Exists </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sets a Boolean variable indicating whether a specified folder exists.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim folderExists As Boolean
folderExists = My.Computer.FileSystem.DirectoryExists($folderName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\DeterminingtheSizeofaFile.snippet</File>
    <Title>Determine the Size of a File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Obtains the size of a file and assigns it to a variable</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileSize As Long 
fileSize = My.Computer.FileSystem.GetFileInfo($filename$).Length</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\EnumerateDrivesonaComputer.snippet</File>
    <Title>Enumerate the Drives on a Computer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Enumerates the drives on a computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each drive In My.Computer.FileSystem.Drives

        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\FindAmountofDiskSpaceAvailable.snippet</File>
    <Title>Find Amount of Disk Space Available</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Obtains the amount of disk space available.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim freeSpace As Long 
freeSpace = My.Computer.FileSystem.GetDriveInfo($Drive$).TotalFreeSpace</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\GetInformationAboutaFile.snippet</File>
    <Title>Get Information About a File </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Obtains an object containing information about a file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileData As FileInfo = My.Computer.FileSystem.GetFileInfo($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\MoveFiles.snippet</File>
    <Title>Move Files</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Moves a file to a new directory.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.MoveFile($oldFilePath$, $newFilePath$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\ReadaDelimitedTextfile.snippet</File>
    <Title>Read a Delimited Text File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns the values in each column and row from a text file with comma-delimited data. Other delimiters may be used.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim filename As String = $Filename$
        Dim fields As String()
        Dim delimiter As String = $Delimiter$
        Using parser As New TextFieldParser(filename)
            parser.SetDelimiters(delimiter)
            While Not parser.EndOfData
                ' Read in the fields for the current line
                fields = parser.ReadFields()
                ' Add code here to use data in fields variable.

            End While
        End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\ReadfromaBinaryFile.snippet</File>
    <Title>Read a Binary File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads data from a binary file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents As Byte()
filecontents = My.Computer.FileSystem.ReadAllBytes($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\ReadfromanExistingTextFileinMyDocuments.snippet</File>
    <Title>Read a file in the My Documents folder</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads the contents of a text file in the My Documents folder into a single string.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fullFilePath As String
Dim fileContents As String
With My.Computer.FileSystem
    fullFilePath = .CombinePath(.SpecialDirectories.MyDocuments, $filename$)
    fileContents = .ReadAllText(fullFilePath)
End With</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\ReadTextfromaFile.snippet</File>
    <Title>Read Text from a File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads the contents of a text file into a string.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents As String
fileContents = My.Computer.FileSystem.ReadAllText($FileName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\RenameaDirectory.snippet</File>
    <Title>Rename a Directory</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Renames a directory.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.RenameDirectory($old$, $NewName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\RenameaFile.snippet</File>
    <Title>Rename a File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Renames a file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.RenameFile($old$, $NewName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\RetrievetheDriveNamesontheLocalComputer.snippet</File>
    <Title>Retrieve the Drives on the Local Computer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the drive names on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim driveNames As New List(Of String)
        For Each drive As DriveInfo In My.Computer.FileSystem.Drives
            driveNames.Add(drive.Name)
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\SearchaDirectoryforFilesRecursively.snippet</File>
    <Title>Search a Directory for Files Recursively</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Searches a directory for files recursively.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.GetFiles($directory$, FileIO.SearchOption.SearchAllSubDirectories, $str$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\SearchFilesforanExpression.snippet</File>
    <Title>Search Files for an Expression</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Searches files in a directory for an expression.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim files As ReadOnlyCollection(Of String)
files = My.Computer.FileSystem.FindInFiles($dir$, $search$, True, FileIO.SearchOption.SearchAllSubDirectories, $wild$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\WriteTexttoFiles.snippet</File>
    <Title>Write Text to a File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a line of text to a text file, replacing any text if the file exists.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.FileSystem.WriteAllText($FileName$, $TextToWrite$, True)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\filesystem\WritetoaBinaryFile.snippet</File>
    <Title>Write to a Binary File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes bytes to a binary file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim fileContents() As Byte = $byteArray$
My.Computer.FileSystem.WriteAllBytes($FileName$, fileContents, $IsAppend$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\CalculateaMonthlyPaymentonaLoan.snippet</File>
    <Title>Calculate a Monthly Payment on a Loan</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Calculates the monthly payment on a loan.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim futureValue As Double = 0
Dim payment As Double
payment = Pmt($annualInterestRate$ / 12, $numberOfPayments$, -$loanAmount$, futureValue, DueDate.EndOfPeriod)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\CalculateCosineOfAnAngle.snippet</File>
    <Title>Calculate the Cosine of a specified Angle</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts an angle from degrees to radians and then calculates cosine of the angle</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim cos As Double = Math.Cos(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\CalculateDepreciation.snippet</File>
    <Title>Calculate the Sum-of-Years Depreciation</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns a Double specifying the sum-of-years digits depreciation of an asset for a specified period.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim depreciation As Double
depreciation = SYD($Cost$, $EndValue$, $UsefulLife$, $Year$)


</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\CalculateSineOfAnAngle.snippet</File>
    <Title>Calculate the Sine of a specified Angle</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts an angle from degrees to radians and then calculates sine of the angle</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim sin As Double = Math.Sin(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\CalculateTangentOfAnAngle.snippet</File>
    <Title>Calculate the Tangent of a specified Angle</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts an angle from degrees to radians and then calculates the tangent of the angle</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radians As Double = $Degrees$ * Math.PI / 180
Dim tan As Double = Math.Tan(radians)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\fundamentals\math\GetARandomNumber.snippet</File>
    <Title>Get a Random Number using the Random class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Generates a random integer between an upper bound and a lower bound.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim generator As New Random
Dim randomValue As Integer
randomValue = generator.Next($LowerBound$, $UpperBound$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\FindtheCurrentUsersName.snippet</File>
    <Title>Find the Current User's Name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the name of the current user.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim userName = My.User.Name</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\PerformanActionwhenSystemPowerModeChanges.snippet</File>
    <Title>Perform an Action when System Power Mode Changes</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Performs an action when the system power mode changes.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_PowerModeChanged(ByVal sender As Object, ByVal e As Microsoft.Win32.PowerModeChangedEventArgs) Handles systemEvent.PowerModeChanged
        Select Case e.Mode
            Case PowerModes.Resume

            Case PowerModes.StatusChange

            Case PowerModes.Suspend

            Case Else

        End Select

    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\RespondtoTimerEvent.snippet</File>
    <Title>Respond to Timer Event</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Responds to a timer event.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Start the timer with the given interval
Private Sub StartTimer()
    Dim Timer1 As New Timer()
    AddHandler Timer1.Tick, AddressOf Timer1_Tick
    Timer1.Interval = $interval$
    Timer1.Start()
End Sub

Private Sub Timer1_Tick(ByVal obj As Object, ByVal e As EventArgs)

End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\UseBeginInvokeonaControltorunCodeAsynchronously.snippet</File>
    <Title>Use BeginInvoke on a Control to Run Code Asynchronously</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses BeginInvoke on a control to run code asynchronously.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Delegate Sub InvokeDelegate()

Public Sub Begin_Invoke()
    $text1$.BeginInvoke(New InvokeDelegate(AddressOf InvokeMethod))
End Sub

Public Sub InvokeMethod()
    $text1$.Text = $str$
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\EventLog\ReadEntriesCreatedbyaParticularApplicationfromtheEventlog.snippet</File>
    <Title>Read Entries Created by a Particular Application from the Event Log</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Populates a list with all event log entries for an application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$)
Dim entries As New List(Of EventLogEntry)
For Each entry As EventLogEntry In log.Entries
    If entry.Source = $SourceName$ Then
        entries.Add(entry)
    End If
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\EventLog\ReadEntriesfromEventLogs.snippet</File>
    <Title>Read Entries from Event Logs</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads all event log entries.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$)
Dim entries As EventLogEntryCollection = log.Entries</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\EventLog\WritetotheApplicationEventLogfromaSpecifiedSource.snippet</File>
    <Title>Write to the Application Event Log from a Specified Source</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a message to the application Event Log.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim log As New EventLog($LogName$, $Machine$, $SourceName$)
log.WriteEntry($message$, $EntryType$, $EventID$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\EventLog\WritetotheMyApplicationLog.snippet</File>
    <Title>Write to the My.Application Log </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a string to the application event log on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.Log.WriteEntry($message$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\CreateaMessageQueue.snippet</File>
    <Title>Create a Public Message Queue</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a public message queue on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Public queue
MessageQueue.Create($PublicQueue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\CreateaPrivateMessageQueue.snippet</File>
    <Title>Create a Private Message Queue</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a private message queue on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Private queue
MessageQueue.Create($PrivateQueue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\PeekatMessages.snippet</File>
    <Title>Peek at Messages</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Peek method to look at the first message on the queue without removing that message from the queue.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
Dim firstMessage As Message
firstMessage = queue.Peek
firstMessage.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = firstMessage.Body.ToString</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\PurgeQueueContents.snippet</File>
    <Title>Purge Queue Contents</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the Purge method to clear the contents of any queue to which you have access rights in the Message Queuing system.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
queue.Purge()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\RetrieveaListofMessageQueuesontheLocalMachine.snippet</File>
    <Title>Retrieve a List of Message Queues on the Local Computer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retreives the message queues on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queues() As MessageQueue
queues = System.Messaging.MessageQueue.GetPublicQueuesByMachine($Server$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\RetrieveMessageLabels.snippet</File>
    <Title>Retrieve Message Labels</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves and array of messages and creates an array of the message labels.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
Dim msg() As Message
msg = queue.GetAllMessages()

Dim labels(msg.Length - 1) As String
For index As Integer = 0 To msg.Length - 1
    labels(index) = msg(index).Label
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\SendaMessagetoaMessageQueue.snippet</File>
    <Title>Send a Message to a Message Queue</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sends a text message to a queue on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New MessageQueue($QueueName$)
queue.Send($Body$, $Label$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\SendandReceiveMessagesProgrammatically.snippet</File>
    <Title>Send and Receive Messages Programmatically</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sends a message to a queue on the local computer, receives that message, and formats the body as a string.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim queue As New System.Messaging.MessageQueue($QueueName$)

' Send a message to the queue.
queue.Send($Message$)

' Wait for the message to arrive, and then remove
' it from the queue.
Dim msg As Message
msg = queue.Receive(New TimeSpan(0, 0, 3))

' Convert the body to a string.
msg.Formatter = New XmlMessageFormatter(New Type() {$BodyType$})
Dim text As String = msg.Body.ToString</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Messaging\SpecifytheFormatterforRetrievedMessages.snippet</File>
    <Title>Specify the Formatter for Retrieved Messages</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines how a message body is deserialized.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim msg As New Message()
msg.Formatter = _
New XmlMessageFormatter(New Type() {$BodyType$})</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Process\ListApplications.snippet</File>
    <Title>List Applications </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a string that contains a list of running application processes.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processList() As Process
processList = Process.GetProcesses</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Process\OpenWebpageinDefaultBrowser.snippet</File>
    <Title>Open Webpage in Default Browser</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Opens a webpage in the default browser.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($url$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Process\RunaProgramAssociatedwithaFileType.snippet</File>
    <Title>Run a Program Associated with a File Type</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Runs a program associated with a file type.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($programName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Process\StartanApplication.snippet</File>
    <Title>Start an Application</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Starts the Notepad application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Process.Start($AppName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Process\StopanApplication.snippet</File>
    <Title>Stop an Application </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Stops a running application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim processList() As Process

processList = Process.GetProcessesByName($appName$)        
For Each proc As Process In processList
            If MsgBox("Terminate " &amp; proc.ProcessName &amp; "?", MsgBoxStyle.YesNo, "Terminate?") = MsgBoxResult.Yes Then
                proc.Kill()
            End If
        Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Registry\CreateaRegistryKeyandSetItsValues.snippet</File>
    <Title>Create a Registry Key</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a registry key.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newKey As RegistryKey 
newKey = My.Computer.Registry.CurrentUser.CreateSubKey($KeyPath$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Registry\DeleteRegistryKey.snippet</File>
    <Title>Delete a Registry Key</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Deletes a registry key.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using key As RegistryKey = My.Computer.Registry.LocalMachine.OpenSubKey($SubKey$)
    key.DeleteSubKey($KeyToDelete$)
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Registry\DetermineWhetheraRegistryKeyExists.snippet</File>
    <Title>Determine Whether a Registry Key Exists </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Checks to see if the specified registry key exists.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim exists As Boolean = False
Try
    If My.Computer.Registry.CurrentUser.OpenSubKey($keyPath$) IsNot Nothing Then
        exists = True
    End If
Finally
    My.Computer.Registry.CurrentUser.Close()
End Try</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Registry\ReadRegistryValues.snippet</File>
    <Title>Read a Registry Value</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads a string registry value from the current user hive.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim keyValue As Object
keyValue = My.Computer.Registry.GetValue($Path$, $Value$, $DefaultValue$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Registry\WriteRegistryValues.snippet</File>
    <Title>Write a Registry Value</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Writes a string registry value to the current user hive. </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Registry.SetValue($Path$, $Key$, $Setting$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Services\ContinueaWindowsService.snippet</File>
    <Title>Continue a Windows Service </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the ServiceController component to continue a paused service.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
If controller.Status = ServiceControllerStatus.Paused Then
    controller.Continue()
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Services\PauseaWindowsService.snippet</File>
    <Title>Pause a Windows Service </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the ServiceController component to pause the a service on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Pause()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Services\RetrieveaListofServices.snippet</File>
    <Title>Retrieve a List of Services</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a string of array of the services on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim services() As ServiceController
services = ServiceController.GetServices()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Services\StartaWindowsService.snippet</File>
    <Title>Start a Windows Service</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Starts a Windows service application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Start()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\Services\StopaWindowsService.snippet</File>
    <Title>Stop a Windows Service</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Stops a Windows service application.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim controller As New ServiceController($serviceName$)
controller.Stop()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\CentralizedResponsetoChangesintheDesktop.snippet</File>
    <Title>Respond to changes to Windows User preferences</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Demonstrates how to handle changes made to the Windows user's preferences</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim WithEvents systemEvent As SystemEvents

    Private Sub systemEvent_UserPreferenceChanged(ByVal sender As System.Object, ByVal e As UserPreferenceChangedEventArgs) Handles systemEvent.UserPreferenceChanged
        Select Case e.Category
            Case UserPreferenceCategory.Accessibility

            Case UserPreferenceCategory.Color

            Case UserPreferenceCategory.Desktop

            Case UserPreferenceCategory.General

            Case UserPreferenceCategory.Icon

            Case UserPreferenceCategory.Keyboard

            Case UserPreferenceCategory.Locale

            Case UserPreferenceCategory.Menu

            Case UserPreferenceCategory.Mouse

            Case UserPreferenceCategory.Policy

            Case UserPreferenceCategory.Power

            Case UserPreferenceCategory.Screensaver

            Case UserPreferenceCategory.VisualStyle

            Case UserPreferenceCategory.Window
            Case Else
        End Select
    End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\ChangeRegionalSettings.snippet</File>
    <Title>Change Regional Settings</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Changes regional settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Application.ChangeCulture($CultureString$)
My.Application.ChangeUICulture($CultureString$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\CreateanEnvironmentVariable.snippet</File>
    <Title>Create an Environment Variable</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a user environment variable that persists between program executions.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Environment.SetEnvironmentVariable($Variable$, $Value$, EnvironmentVariableTarget.User)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\DetectDesktopDisplayResolution.snippet</File>
    <Title>Determine Desktop Display Resolution </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the width and height, in pixels, of the desktop.</Description>
    <Keywords>EventLog component,logging events</Keywords>
    <Language>VB</Language>
    <Code>Dim height = My.Computer.Screen.Bounds.Height
Dim width = My.Computer.Screen.Bounds.Width</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\DeterminetheAmountofSystemMemory.snippet</File>
    <Title>Determine the Amount of System Memory Available</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the amount of system memory currently available.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim totalPhysicalMemmory = My.Computer.Info.TotalPhysicalMemory</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\DeterminetheCurrentWindowsVersion.snippet</File>
    <Title>Determine the Current Windows Version</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the version of Windows in use</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim osVersion = My.Computer.Info.OSVersion</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\DeterminetheWindowsSystemDirectory.snippet</File>
    <Title>Determine the Windows System Directory </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Assigns the System Directory to a String.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim systemDirectory = System.Environment.SystemDirectory</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\FindtheAmountofDiskSpaceAvailable.snippet</File>
    <Title>Find the Amount of Disk Space Available</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Returns the amount of available disk space on a specified drive.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim drive = My.Computer.FileSystem.GetDriveInfo($DriveLetter$)
Dim space = drive.AvailableFreeSpace</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\ListEnvironmentVariables.snippet</File>
    <Title>List Environment Variables</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a string that lists all the user environment variables and their values.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim environmentVariables = Environment.GetEnvironmentVariables($target$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveAccessiblityPreferences.snippet</File>
    <Title>Retrieve Accessibility Preferences</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gets a value indicating whether the user has selected to run in high-contrast mode.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim contrastOn = SystemInformation.HighContrast</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveanEnvironmentVariable.snippet</File>
    <Title>Retrieve an Environment Variable</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the value of an environment variable.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim value = My.Application.GetEnvironmentVariable($Variable$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforIcons.snippet</File>
    <Title>Retrieve User Preferences for Icons</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the user preferences for icon display properties.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim size = SystemInformation.IconSize
Dim spacingSize = SystemInformation.IconSpacingSize
Dim horizontalSpace = SystemInformation.IconHorizontalSpacing
Dim verticalSpace = SystemInformation.IconVerticalSpacing</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforKeyboardSettings.snippet</File>
    <Title>Retrieve User Preferences for Keyboard Settings</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the user's keyboard settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim delay = SystemInformation.KeyboardDelay
Dim speed = SystemInformation.KeyboardSpeed</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforMenus.snippet</File>
    <Title>Retrieve User Preferences for Menus</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves several menu settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim barSize = SystemInformation.MenuBarButtonSize
Dim buttonSize = SystemInformation.MenuButtonSize
Dim checkSize = SystemInformation.MenuCheckSize
Dim menuFont = SystemInformation.MenuFont
Dim height = SystemInformation.MenuHeight
Dim delay = SystemInformation.MenuShowDelay</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforMouseSettings.snippet</File>
    <Title>Retrieve Mouse Settings</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves several mouse settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim swapped = My.Computer.Mouse.ButtonsSwapped
Dim hasWheel = My.Computer.Mouse.WheelExists
Dim scrollLines = My.Computer.Mouse.WheelScrollLines
Dim buttons = SystemInformation.MouseButtons
Dim hoverSize = SystemInformation.MouseHoverSize
Dim hoverTime = SystemInformation.MouseHoverTime
Dim speed = SystemInformation.MouseSpeed
Dim delta = SystemInformation.MouseWheelScrollDelta
Dim nativeWheel = SystemInformation.NativeMouseWheelSupport</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforRegionalSettings.snippet</File>
    <Title>Retrieve Regional Settings</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves various regional settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim installed = My.Computer.Info.InstalledUICulture
Dim current = My.Application.Culture
Dim ui = My.Application.UICulture</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforSystemColors.snippet</File>
    <Title>Retrieve User Preferences for System Colors</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves just two of the many system color settings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim control = SystemColors.Control
Dim window = SystemColors.Window</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrieveorChangeUserPreferencesforSystemPowerSettings.snippet</File>
    <Title>Retrieve Information about Battery Life</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the percent of battery life left, and warns the user if the percent is below five percent.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim power = SystemInformation.PowerStatus
Dim percent= power.BatteryLifePercent
If percent &lt; 0.05 Then
   MsgBox("Percent battery life remaining: " &amp; percent * 100)
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\os\SystemInfo\RetrievetheCurrentTimeontheLocalComputer.snippet</File>
    <Title>Retrieve the Current Time on the Local Computer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays the current time on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim localTime = My.Computer.Clock.LocalTime</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\ConvertaRelativeUritoanAbsoluteUri.snippet</File>
    <Title>Convert a Relative Uri to an Absolute Uri</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts a relative Uri to an absolute Uri.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim baseUri As New Uri($uri1$)
Dim relativeUri As New Uri($uri2$)

' Compose absolute Uri using the base and the relative Uri.
Dim absoluteUri As New Uri(baseUri, relativeUri)

Dim absolute = absoluteUri.AbsolutePath</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\DetermineiftheNetworkisAvailable.snippet</File>
    <Title>Determine if the Network is Available</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines whether the network connection is available on the local computer.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim isAvailable = My.Computer.Network.IsAvailable</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\DownloadaFileusingHttp.snippet</File>
    <Title>Download a File using Http</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Downloads a file using http.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Network.DownloadFile($url$, $location$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\EnumerateSerialPorts.snippet</File>
    <Title>Enumerate Serial Ports</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Shows how to enumerate serial ports using the My object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>For Each portName In My.Computer.Ports.SerialPortNames
    
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\PingAnotherComputer.snippet</File>
    <Title>Ping Another Computer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines whether the specified Web site responds.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim siteResponds = My.Computer.Network.Ping($url$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\ReadDatafromaSerialPort.snippet</File>
    <Title>Read Data from a Serial Port</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Reads data from a serial port.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim buffer As New StringBuilder
Using comPort = My.Computer.Ports.OpenSerialPort($COM$)
    Do
        Dim line = comPort.ReadLine()
        If line Is Nothing Then
            Exit Do
        Else
            buffer.AppendLine(line)
        End If
    Loop
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\SendAnEmail.snippet</File>
    <Title>Create an E-Mail Message </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses the MailMessage class to send an e-mail message.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim message As New MailMessage($sender$, $recipient$, $subject$, $message$)
Dim emailClient As New SmtpClient($serverName$)
emailClient.Send(message)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\UploadAFile.snippet</File>
    <Title>Upload a File Using My.Computer.Network</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uploads a local file to the Internet.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Network.UploadFile($localFile$, $address$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\connectivity\UseaSerialPorttoDialaPhoneNumber.snippet</File>
    <Title>Use a SerialPort to Dial a Phone Number</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses a SerialPort to dial a phone number.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using comPort = My.Computer.Ports.OpenSerialPort($Com$, $Baud$)
    comPort.DtrEnable = True
    comPort.Write($Dial$ &amp; vbCrLf)

    ' All data transfer code goes here.

End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\ComputetheHashCodeofaPassword.snippet</File>
    <Title>Compute the Hash Code of a Password</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Computes the SHA1 hash code of a password.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>        Dim sha1CryptoService As New SHA1CryptoServiceProvider()
        Dim byteValue = Encoding.UTF8.GetBytes($password$)
        Dim hashValue = sha1CryptoService.ComputeHash(byteValue)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\ComputetheHashCodeofaString.snippet</File>
    <Title>Compute the Hash Code of a String</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Computes the hash of a string using MD5, SHA1, or SHA384 algorithms.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Enum HashMethod
        MD5
        SHA1
        SHA384
    End Enum

    Function GenerateHashDigest(ByVal source As String, ByVal algorithm As HashMethod) As String
        Dim hashAlgorithm As HashAlgorithm = Nothing
        Select Case algorithm
            Case HashMethod.MD5
                hashAlgorithm = New MD5CryptoServiceProvider
            Case HashMethod.SHA1
                hashAlgorithm = New SHA1CryptoServiceProvider
            Case HashMethod.SHA384
                hashAlgorithm = New SHA384Managed
            Case Else
                ' Error case.
        End Select

        Dim byteValue = Encoding.UTF8.GetBytes(source)
        Dim hashValue = hashAlgorithm.ComputeHash(byteValue)
        Return Convert.ToBase64String(hashValue)
    End Function
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\DecryptaString.snippet</File>
    <Title>Decrypt text from a file</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Decrypts text from a file using the Rijndael encryption algorithm.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using fStream = File.Open("encrypted.txt", FileMode.OpenOrCreate)
    Dim RijndaelAlg As Rijndael = Rijndael.Create
    Using cStream As New CryptoStream(fStream,
                                  RijndaelAlg.CreateDecryptor(RijndaelAlg.Key, RijndaelAlg.IV),
                                  CryptoStreamMode.Read)

        Using sReader As New StreamReader(cStream)
            Dim plainText = sReader.ReadLine()
        End Using
    End Using
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\EncryptaString.snippet</File>
    <Title>Encrypt a String</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Encrypts text from a file using the Rijndael encryption algorithm.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using fStream = File.Open("encrypted.txt", FileMode.OpenOrCreate)
    Dim RijndaelAlg As Rijndael = Rijndael.Create
    Using cStream As New CryptoStream(fStream,
                                      RijndaelAlg.CreateEncryptor(RijndaelAlg.Key, RijndaelAlg.IV),
                                      CryptoStreamMode.Write)

        Using sWriter As New StreamWriter(cStream)
            sWriter.WriteLine("Text to encrypt")
        End Using
    End Using
End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\FindtheCurrentUser'sName.snippet</File>
    <Title>Find the Current User's Name</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the name of the current user.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim userName = My.User.Name
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\other\security\GenerateCryptographicallyRandomData.snippet</File>
    <Title>Generate Cryptographically Random Data</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Generates cryptographically random data.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim randomNumGen As RandomNumberGenerator = RNGCryptoServiceProvider.Create()
Dim randomBytes($count$) As Byte

randomNumGen.GetBytes(randomBytes)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Clipboard\CopyAClassInstanceToTheClipboard.snippet</File>
    <Title>Copy a Class Instance to the Clipboard</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Copies an instance of a serializable class to the Clipboard.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetData("$className$", $classInstance$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Clipboard\CopyAnImageToTheClipboard.snippet</File>
    <Title>Copy an Image to the Clipboard</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Copies an Image to the Clipboard.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetImage($image$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Clipboard\CopyAStringToTheClipboard.snippet</File>
    <Title>Copy a String to the Clipboard</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Copies a String to the Clipboard.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Clipboard.SetText($text$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Clipboard\GetAnImageFromTheClipboard.snippet</File>
    <Title>Get an Image from the Clipboard</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gets an Image from the Clipboard and stores it in an Image object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim picture As Image
If My.Computer.Clipboard.ContainsImage() Then
    picture = My.Computer.Clipboard.GetImage
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Clipboard\GetaStringFromTheClipboard.snippet</File>
    <Title>Get a String from the Clipboard</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Gets a String from the Clipboard and stores it in a String object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim text As String
If My.Computer.Clipboard.ContainsText Then
    text = My.Computer.Clipboard.GetText
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\AddaToolTiptoaWindowsFormsControl.snippet</File>
    <Title>Add a ToolTip to a Windows Forms Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds a ToolTip to a Windows Forms Control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim tooltip As New ToolTip()
tooltip.SetToolTip($control$, $text$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Button\ResizeaButtonDynamicallyByMeasuringItsText.snippet</File>
    <Title>Resize a Button Dynamically by Measuring its Text</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Resizes a button by measuring its text and then resetting its Width.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' Use a Graphics object to measure the button's text.  Then add blanks to leave space on either side.
Dim surface As Graphics = $buttonName$.CreateGraphics
Dim textSize As SizeF = surface.MeasureString("  " &amp; $buttonName$.Text &amp; "  ", $buttonName$.Font)
surface.Dispose()
$buttonName$.Width = CInt(textSize.Width)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Button\ResizeaButtonDynamicallyByUsingAutoSize.snippet</File>
    <Title>Resize a Button Dynamically by using AutoSize</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses AutoSize to dynamically resize a button to the length of its text.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$buttonName$.AutoSize = True
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Calendar\SelectRangeOfDatesInAMonthCalendar.snippet</File>
    <Title>Select a Range of Dates in a Windows Forms MonthCalendar</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Selects a range of dates in a MonthCalendar control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$calendar$.SetSelectionRange($startDate$, $endDate$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ComboBox\PopulateaComboBoxfromanArrayList.snippet</File>
    <Title>Populate a ComboBox from an ArrayList</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Uses an ArrayList object as the data source for a ComboBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$comboBoxName$.DataSource = $arrayListName$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ComboBox\PopulateComboBoxfromColumnofaDatabaseTable.snippet</File>
    <Title>Populate a ComboBox from the Column of a Database Table</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Fills a ComboBox with data from a DataTable object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Me.$ComboBoxName$.DataSource = $table$
Me.$ComboBoxName$.DisplayMember = $columnName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ComboBox\ProvideAutomaticTextCompletionforaComboBox.snippet</File>
    <Title>Provide Automatic Text Completion for a ComboBox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Provides automatic text completion for a combobox.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$comboBoxName$.AutoCompleteMode = AutoCompleteMode.$mode$
$comboBoxName$.AutoCompleteSource = AutoCompleteSource.$source$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\datagridview\LocktheColumnWidthsofaDataGridView.snippet</File>
    <Title>Lock the Column Widths of a DataGridView</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Locks the column widths of a DataGridView.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$grid$.AllowUserToResizeColumns = False</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ListBox\ClearItemsFromaBoundListBoxControl.snippet</File>
    <Title>Clear Items from a Bound ListBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Clears items from a bound ListBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.DataSource = Nothing
$listBoxName$.Items.Clear()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ListBox\LoadDataTableColumnIntoListBoxControl.snippet</File>
    <Title>Load a Column from a Database Table into a ListBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Fills a ListBox with data from a DataTable object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.DataSource = $table$
$listBoxName$.DisplayMember = $columnName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ListBox\LocateAnItemInAListBoxControl.snippet</File>
    <Title>Locate an Item in a Windows Forms ListBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Locates the first incidence of a string in a ListBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim index As Integer
index = $listBoxName$.FindString($searchString$)
If index &lt;&gt; ListBox.NoMatches Then
    ' Item found.
Else
    ' Item not found.
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ListBox\SelectAnItemInAListBoxControl.snippet</File>
    <Title>Select an Item in a Windows Forms ListBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Selects an item in a ListBox control, programmatically.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$listBoxName$.SelectedIndex = $index$
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ListView\DeterminetheSelectedIteminaListView.snippet</File>
    <Title>Determine the Selected Item in a ListView</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the selected item in a ListView and assigns it to a variable.</Description>
    <Keywords>ListView,ListViewItem,SelectedItems</Keywords>
    <Language>VB</Language>
    <Code>Dim selectedItem As ListViewItem
If $listViewName$.SelectedItems.Count &gt; 0 Then
    selectedItem = $listViewName$.SelectedItems(0)
Else
    selectedItem = Nothing
End If</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Menu\AddACheckMarkToAToolStripMenuItem.snippet</File>
    <Title>Add a Check Mark to a ToolStripMenuItem</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds a check mark to a ToolStripMenuItem. </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuItemName$.Checked = True</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Menu\AddAContextMenuToAWindowsForm.snippet</File>
    <Title>Add a Context Menu to a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds a context menu to a windows form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newMenu As New ContextMenuStrip()
$form$.ContextMenuStrip = newMenu

Dim firstItem As New ToolStripMenuItem()
Dim secondItem As New ToolStripMenuItem()
firstItem.Text = $firstItem$
secondItem.Text = $secondItem$

newMenu.Items.Add(firstItem)
newMenu.Items.Add(secondItem)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Menu\AddAShortcutKeyToAToolStripMenuItem.snippet</File>
    <Title>Add a Shortcut Key to a ToolStripMenuItem</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Add a shortcut to a ToolStripMenuItem. </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuItemName$.ShortcutKeys = $shortcutKey$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Menu\AddMenuItemsToAWindowsForm.snippet</File>
    <Title>Add Menu Items to Windows Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds menu items to an existing menu.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim addedMenuStripItem As New ToolStripMenuItem
Dim firstDropDownItem As New ToolStripMenuItem
Dim secondDropDownItem As New ToolStripMenuItem

addedMenuStripItem.Text = $menuName$
firstDropDownItem.Text = $firstDropDownName$
secondDropDownItem.Text = $secondDropDownName$

$menuStripName$.Items.Add(addedMenuStripItem)

addedMenuStripItem.DropDownItems.Add(firstDropDownItem)
addedMenuStripItem.DropDownItems.Add(secondDropDownItem)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\Menu\DeleteAToolStripMenuItemFromAMenuStrip.snippet</File>
    <Title>Delete a ToolStripMenuItem from a MenuStrip</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Deletes a ToolStripMenuItem from an existing MenuStrip.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$menuStripName$.Items.Remove($menuItemName$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\ProgressBar\UseAProgressBarToTrackIterations.snippet</File>
    <Title>Use a ProgressBar to Track an Iteration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Increments a ProgressBar by a fixed amount, upon each iteration.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>With $progressBar$
    .Minimum = $minProgress$
    .Maximum = $maxProgress$
    .Value = $initValue$
    .Step = $step$

    For i As Integer = .Minimum To .Maximum
        ' Perform one step of the action being tracked.
        .PerformStep()
    Next i

End With</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\radiobutton\CreateRadioButtonGroupfromaStringArray.snippet</File>
    <Title>Create a RadioButton Group from a String Array</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a Group of RadioButtons from an Array of Strings.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim radio As RadioButton
Dim y As Integer = $topY$

For Each button As String In $array$
    radio = New RadioButton()
    With radio
        .Location = New Point($x$, y)
		.Text = button
    End With
    y += $spacing$
    Me.$groupBoxName$.Controls.Add(radio)
Next</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\RichTextBox\FormatCharactersinBoldinaRichTextBox.snippet</File>
    <Title>Format Characters in Bold in a RichTextBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds the text "This text is in bold." to an existing RichTextBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>' For more information on the rich text format characters, see: http://www.microsoft.com/downloads/details.aspx?FamilyID=e5b8ebc2-6ad6-49f0-8c90-e4f763e3f04f&amp;DisplayLang=en
$RTFControl$.Rtf = "{\rtf1\ansi This is in \b bold\b0.}"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\RichTextBox\LoadanRTFFileintoaRichTextBoxControl.snippet</File>
    <Title>Load an RTF File into a RichTextBox Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Loads a file in RTF format into a RichTextBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$RTFControl$.LoadFile($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\RichTextBox\PositiontheCursorinaRichTextBox.snippet</File>
    <Title>Position the Cursor in a RichTextBox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Positions the cursor in a RichTextBox.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$text$.Focus()
$text$.Select($Location$, 0)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\RichTextBox\SavetheContentsofaRichTextBoxtoaRTFFile.snippet</File>
    <Title>Save the Contents of a RichTextBox to a RTF File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Saves the content of the RichText box to a RTF file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$RTFControl$.SaveFile($Filename$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\textbox\PopulateAMultilineTextBoxWithAStringArray.snippet</File>
    <Title>Enter Multiline String into Multiline TextBox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Enters a multiline string into a multiline textbox.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$textboxName$.Lines = $arrayName$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Controls\TreeView\DeterminetheSelectedNodeinaTreeView.snippet</File>
    <Title>Determine the Selected Node in a TreeView</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines the selected node in a TreeView control and assigns it to a variable.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim selectedNode As TreeNode
selectedNode = $treeViewName$.SelectedNode</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\CreateaBitmapatRunTime.snippet</File>
    <Title>Create a Bitmap at Run Time</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates and fills a Bitmap object and displays it in an existing Windows Forms PictureBox control.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim flag As New Bitmap($Width$, $Height$)
Dim x As Integer
Dim y As Integer
' Make the entire bitmap white.
For x = 0 To flag.Height - 1
    For y = 0 To flag.Width - 1
        flag.SetPixel(x, y, $pixelColor$)
    Next
Next

' Draw a diagonal red stripe.
For x = 0 To flag.Height - 1
    flag.SetPixel(x, x, Color.Red)
Next
$control$.Image = flag


            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\CreateaCustomBrushDesign.snippet</File>
    <Title>Create a Custom Brush</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a TextureBrush object with an image file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim texture As New TextureBrush(Image.FromFile($Filename$))
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\CreateaPen.snippet</File>
    <Title>Create a Pen</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a Pen object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim tomatoPen As System.Drawing.Pen
tomatoPen = New System.Drawing.Pen($color$)

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\CreateaSolidBrush.snippet</File>
    <Title>Create a Solid Brush</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a SolidBrush object.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim aBrush As System.Drawing.SolidBrush
aBrush = New System.Drawing.SolidBrush($color$)

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\CreateaTriangleShapeusingaGraphicsPathObject.snippet</File>
    <Title>Create a Triangle Shape using a GraphicsPath Object</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a triangle by connecting a series of points.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim path As New GraphicsPath()
Dim points() As Point = { _
    New Point($Location1$), _
    New Point($Location2$), _
    New Point($Location3$), _
    New Point($Location4$)}
path.AddLines(points)

Dim surface As Graphics = $PictureBox$.CreateGraphics
surface.DrawPath($Pen$, path)
            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DisplayanAnimatedGif.snippet</File>
    <Title>Display an Animated GIF</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays an animated GIF.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$pic$.Image = Image.FromFile($image$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaFilledEllipseonaWindowsForm.snippet</File>
    <Title>Draw a Filled Ellipse on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a filled ellipse on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using brush As New SolidBrush($color$)
    Using formGraphics = $form$.CreateGraphics()
        formGraphics.FillEllipse(brush, New Rectangle($location$))
    End Using
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaFilledRectangleonaWindowsForm.snippet</File>
    <Title>Draw a Filled Rectangle on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a filled rectangle on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using redBrush As New SolidBrush($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.FillRectangle(redBrush, New Rectangle($size$))
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaLineonaWindowsForm.snippet</File>
    <Title>Draw a Line on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a line on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Using redPen As New Pen($color$), _
    formGraphics As Graphics = $form$.CreateGraphics()
    formGraphics.DrawLine(redPen, $location$)
End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaPieChart.snippet</File>
    <Title>Draw a Pie Chart</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a pie chart.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    ' Shows how to call the DrawPieChart method
    Public Sub DrawPieChartHelper()
        Dim percents = {$Percent1$, $Percent2$, $Percent3$}
        Dim colors = {$Color1$, $Color2$, $Color3$}
        Using graphics = Me.CreateGraphics()
            Dim location As New Point($XLocation$, $YLocation$)
            Dim size As New Size($Width$, $Height$)
            DrawPieChart(percents, colors, graphics, location, size)
        End Using
    End Sub


' Draws a pie chart.
Public Sub DrawPieChart(ByVal percents() As Integer, ByVal colors() As Color,
                        ByVal surface As Graphics, ByVal location As Point,
                        ByVal pieSize As Size)
    
    ' Check if sections add up to 100.
    Dim sum = 0
    For Each percent In percents
        sum += percent
    Next

    If sum &lt;&gt; 100 Then
        Throw New ArgumentException("Percentages do not add up to 100.")
    End If

    If percents.Length &lt;&gt; colors.Length Then
        Throw New ArgumentException("There must be the same number of percents and colors.")
    End If

    Dim percentTotal = 0
    For percent = 0 To percents.Length() - 1
        Using brush As New SolidBrush(colors(percent))
            surface.FillPie(brush,
                            New Rectangle(location, pieSize),
                            CSng(percentTotal * 360 / 100),
                            CSng(percents(percent) * 360 / 100))
        End Using
        
        percentTotal += percents(percent)
    Next
    Return
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaRubberBandRectangle.snippet</File>
    <Title>Draw a Rubber Band Rectangle</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a rubber band rectangle on the form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim originalPoint As Point
Dim lastPoint As Point
Dim mouseIsDown As Boolean

Public Sub MyMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseDown

    mouseIsDown = True
    originalPoint.X = e.X
    originalPoint.Y = e.Y
    lastPoint.X = -1
    lastPoint.Y = -1

End Sub

Private Sub MyDrawReversibleRectangle(ByVal point1 As Point, ByVal point2 As Point)

    Dim rect As Rectangle

    point1 = PointToScreen(point1)
    point2 = PointToScreen(point2)

    If point1.X &lt; point2.X Then
        rect.X = point1.X
        rect.Width = point2.X - point1.X
    Else
        rect.X = point2.X
        rect.Width = point1.X - point2.X
    End If

    If point1.Y &lt; point2.Y Then
        rect.Y = point1.Y
        rect.Height = point2.Y - point1.Y
    Else
        rect.Y = point2.Y
        rect.Height = point1.Y - point2.Y
    End If

    ControlPaint.DrawReversibleFrame(rect, Color.Yellow, FrameStyle.Thick)

End Sub

Public Sub MyMouseUp(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseUp

    mouseIsDown = False

    If lastPoint.X &lt;&gt; -1 Then
        Dim currentPoint As New Point(e.X, e.Y)
        MyDrawReversibleRectangle(originalPoint, lastPoint)
    End If

    lastPoint.X = -1
    lastPoint.Y = -1
    originalPoint.X = -1
    originalPoint.Y = -1

End Sub

Public Sub MyMouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles Me.MouseMove

    Dim currentPoint As New Point(e.X, e.Y)

    If mouseIsDown Then

        If lastPoint.X &lt;&gt; -1 Then
            MyDrawReversibleRectangle(originalPoint, lastPoint)
        End If

        lastPoint = currentPoint
        MyDrawReversibleRectangle(originalPoint, currentPoint)
    End If

End Sub

Protected Overrides Sub OnLoad(ByVal e As EventArgs)
    mouseIsDown = False
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawaShapewithGradientFill.snippet</File>
    <Title>Draw a Shape with Gradient Fill</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws a shape with gradient fill.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim rect As New Rectangle($x$, $y$, $width$, $height$)
    Using gc = $form$.CreateGraphics()
        Using gradientBrush As New LinearGradientBrush(rect, $color1$, $color2$, LinearGradientMode.Horizontal)
            gc.FillRectangle(gradientBrush, rect)
        End Using
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawOutlinedEllipse.snippet</File>
    <Title>Draw Outlined Ellipse</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws outlined ellipses on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Using redPen As New Pen($color1$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawEllipse(redPen, New Rectangle($location1$))
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawOutlinedRectangle.snippet</File>
    <Title>Draw Outlined Rectangle</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws outlined rectangle on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Using redPen As New Pen($color2$), _
        formGraphics As Graphics = $form$.CreateGraphics()
        formGraphics.DrawRectangle(redPen, New Rectangle($location2$))
    End Using</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawTextonaWindowsForm.snippet</File>
    <Title>Draw Text on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws text on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Drawing\DrawVerticalTextonaWindowsForm.snippet</File>
    <Title>Draw Vertical Text on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Draws text on a form in a vertical orientation.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim drawFormat As New StringFormat()

    Using formGraphics As Graphics = $form$.CreateGraphics(), _
        drawFont As New System.Drawing.Font($FontName$, $FontSize$), _
        drawBrush As New SolidBrush($color$)

        drawFormat.FormatFlags = StringFormatFlags.DirectionVertical
        formGraphics.DrawString($text$, drawFont, drawBrush, _
            $Xlocation$, $Ylocation$, drawFormat)
    End Using
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Fonts\CreateaFont.snippet</File>
    <Title>Create a Font</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a font by using three overloads of the Font constructor.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim italicFont As New Font($fontName$, $fontSize$, $fontStyle$)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\AddaWindowsFormsControlatRunTime.snippet</File>
    <Title>Add a Windows Forms Control at Run Time</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates a new instance of a Windows forms TextBox control at run time.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>    Dim $controlName$ As New $controlType$()
    With $controlName$
        .Location = New Point($locationX$, $locationY$)
        .Size = New Size($width$, $height$)
        .TabIndex = $tabIndex$
        .Text = $text$
    End With
    Controls.Add($controlName$)

</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\ArrangeMDIChildForms.snippet</File>
    <Title>Arrange MDI Child Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Arranges the child forms in a cascading layout.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$form$.LayoutMdi(MdiLayout.Cascade)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\ConvertMouseCoordinatestoScreenCoordinates.snippet</File>
    <Title>Convert Mouse Coordinates to Screen Coordinates</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Converts mouse coordinates from a mouse event into screen coordinates.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $formName$_MouseDown(ByVal sender As Object, _
ByVal e As System.Windows.Forms.MouseEventArgs) _
Handles $formName$.MouseDown
    Dim screenPoint As Point
    screenPoint = $formName$.PointToScreen(New Point(e.X, e.Y))
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\CreateMDIChildForms.snippet</File>
    <Title>Create MDI Child Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Creates and displays a new MDI child form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim newMDIChild As New Form()
newMDIChild.MdiParent = $formName$
newMDIChild.Show()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\CreateTransparentWindowsForms.snippet</File>
    <Title>Create Transparent Windows Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sets the opacity of a form to make it transparent.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Opacity = $opacity$

            </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\DeterminetheActiveMDIChild.snippet</File>
    <Title>Determine the Active MDI Child and Control</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves the active MDI child form and the active control on the child form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim activeChild As Form = $formName$.ActiveMdiChild

Dim activeControl As Control = Nothing
If Not activeChild IsNot Nothing Then
    activeControl = activeChild.ActiveControl
End If
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\DeterminewhichControlonaWindowsFormisSelected.snippet</File>
    <Title>Determine Which Control on a Windows Form is Selected</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Finds the selected control on a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$selectedControl$ = $formName$.ActiveControl</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\DetermineWhichModifierKeyWasPressed.snippet</File>
    <Title>Determine Which Modifier Key Was Pressed</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Monitors for modifier keys such as the SHIFT, ALT, and CTRL keys.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Private Sub $formName$_KeyPress(ByVal sender As Object, _
ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles $formName$.KeyPress

    If (Control.ModifierKeys And $modifierKey$) = $modifierKey$ Then

    End If

End Sub
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\DisplayOneWindowsFormfromAnother.snippet</File>
    <Title>Display a Windows Form </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Displays a windows form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Show()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\EliminatetheTitleBar.snippet</File>
    <Title>Eliminate the TitleBar from a Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Eliminates the TitleBar from a Form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.FormBorderStyle = Windows.Forms.FormBorderStyle.None</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\KeepaWindowsFormonTop.snippet</File>
    <Title>Keep a Windows Form on Top</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Shows how the TopMost property controls whether a form is a top-most form. A top-most form will float above other, non–top-most forms even when it is not active. </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.TopMost = $topboolean$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\MoveaWindowbyDraggingtheClientAreaoftheForm.snippet</File>
    <Title>Move a Window by Dragging the Client Area of the Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Moves a form by dragging any part of it with the mouse. This feature is particularly useful when the form has no title bar.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Dim mouseOffset As Point

Private Sub $formName$_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseDown
    $mouseOffset$ = New Point(-e.X, -e.Y)
End Sub

Private Sub $formName$_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs) Handles MyBase.MouseMove

    If e.Button = MouseButtons.Left Then
        Dim mousePos = Control.MousePosition
        mousePos.Offset($mouseOffset$.X, $mouseOffset$.Y)
        Location = mousePos
    End If
End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\PlayaBeepFromaWindowsForm.snippet</File>
    <Title>Play a Beep From a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Plays a beep.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Beep()
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\ResizeWindowsForms.snippet</File>
    <Title>Resize Windows Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Resizes a form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.Size = New Size($newWidth$, $newHeight$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\RestrictaControl'sAcceptableKeystrokes.snippet</File>
    <Title>Restrict a Control's Acceptable Keystrokes</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Overrides the default ProcessCmdKey function of a Windows Forms Control and restricts user input to numeric and navigation keys.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>Class $restrictedControlClass$
    Inherits $baseClass$
    Const WM_KEYDOWN As Integer = &amp;H100

    Protected Overrides Function ProcessCmdKey _
        (ByRef msg As Message, _
        ByVal keyData As Keys) As Boolean

        If msg.Msg = WM_KEYDOWN Then
            Return Not ((keyData &gt;= Keys.D0 And keyData &lt;= Keys.D9) _
                Or keyData = Keys.Back Or keyData = Keys.Left _
                Or keyData = Keys.Right Or keyData = Keys.Up _
                Or keyData = Keys.Down Or keyData = Keys.Delete
        End If
        Return MyBase.ProcessCmdKey(msg, keyData)
    End Function
End Class
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\RetrieveInformationfromtheParentFormofaDialogBox.snippet</File>
    <Title>Retrieve Information from the Parent MDI Form of a Dialog Box</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Retrieves information from the parent MDI form.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$text$ = $formName$.ParentForm.Text
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\RetrievetheResultforDialogBoxes.snippet</File>
    <Title>Retrieve the Result for Dialog Boxes</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Determines how a dialog box was closed.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>If $dialogName$.ShowDialog = $dialogResult$ Then

End If
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Forms\SettheScreenLocationofWindowsForms.snippet</File>
    <Title>Set the Screen Location of Windows Forms</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Sets the location, in pixels, of the the top-left corner of the form. </Description>
    <Keywords />
    <Language>VB</Language>
    <Code>$formName$.DesktopLocation = New Point($newX$, $newY$)
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Sound\LoopaSoundPlayingonaWindowsForm.snippet</File>
    <Title>Loop a Sound Playing on a Windows Form</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Plays a looping sound in the background.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Play($FileName$, AudioPlayMode.BackgroundLoop)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Sound\PlayaSound.snippet</File>
    <Title>Play a Sound </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Plays a sound from a file.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Play($filename$,  AudioPlayMode.WaitToComplete)</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\windowsforms\Sound\StopPlayingSoundsintheBackground.snippet</File>
    <Title>Stop Playing Sounds in the Background </Title>
    <Author>Microsoft Corporation</Author>
    <Description>Stops a sound playing in the background.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>My.Computer.Audio.Stop()</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\DependencyProperty Attached.snippet</File>
    <Title>Add a DependencyProperty Registration (Attached)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register an attached DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Shared Function Get$propertyName$(ByVal element As DependencyObject) As $propertyType$
              If element Is Nothing Then
                  Throw New ArgumentNullException("element")
              End If

              Return element.GetValue($propertyName$Property)
          End Function

          Public Shared Sub Set$propertyName$(ByVal element As DependencyObject, ByVal value As $propertyType$)
              If element Is Nothing Then
                  Throw New ArgumentNullException("element")
              End If

              element.SetValue($propertyName$Property, value)
          End Sub

          Public Shared ReadOnly $propertyName$Property As _
                                 DependencyProperty = DependencyProperty.RegisterAttached("$propertyName$", _
                                 GetType($propertyType$), GetType($ownertype$), _
                                 New PropertyMetadata($defaultValue$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\DependencyProperty ReadOnly.snippet</File>
    <Title>Add a DependencyProperty Registration (Read-Only)</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a read-only DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public ReadOnly Property $propertyName$ As $propertyType$
              Get
                  Return GetValue($ownerType$.$propertyName$Property)
              End Get
          End Property

          Private Shared ReadOnly $propertyName$PropertyKey As DependencyPropertyKey = _
                                  DependencyProperty.RegisterReadOnly ("$propertyName$", _
                                  GetType($propertyType$), GetType($ownerType$), _
                                  New PropertyMetadata($defaultValue$))

          Public Shared ReadOnly $propertyName$Property As DependencyProperty = _
                                 $propertyName$PropertyKey.DependencyProperty
        </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\DependencyProperty.snippet</File>
    <Title>Add a DependencyProperty Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a read-write DependencyProperty. This snippet must be added to a class that derives from DependencyObject.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Property $propertyName$ As $propertyType$
              Get
                Return GetValue($propertyName$Property)
              End Get
              
              Set(ByVal value As $propertyType$)
                  SetValue($propertyName$Property, value)
              End Set
          End Property

          Public Shared ReadOnly $propertyName$Property As DependencyProperty = _
                                 DependencyProperty.Register("$propertyName$", _
                                 GetType($propertyType$), GetType($ownerType$), _
                                 New PropertyMetadata($defaultValue$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\RoutedCommand.snippet</File>
    <Title>Add a RoutedCommand Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a RoutedCommand.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Shared ReadOnly $commandName$Command As RoutedCommand = _
                                 New RoutedCommand("$commandName$", _
                                 GetType($ownerType$))
                                 </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\RoutedCommandHandlers.snippet</File>
    <Title>Add a RoutedCommand CanExecute and Executed Handler</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds CanExecute and Executed handlers. To function, these handlers must be hooked to a CommandBinding.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Private Sub OnCanExecute$commandName$(ByVal sender As Object, ByVal e As CanExecuteRoutedEventArgs)
              ' Add actions to ensure that the command can execute.
              ' Remove this exception after the appropriate code is added.
              Throw New NotImplementedException()

              '' Example action:
              ' If condition Then
              '   ' The condition for the command was met.
                  ' e.CanExecute = True
                  ' e.Handled = True
              ' End If
          End Sub

          Private Sub OnExecute$commandName$(ByVal sender As Object, ByVal e As ExecutedRoutedEventArgs)
              ' Perform the actions associated with the command.
              ' Remove this exception after the appropriate code is added.
              Throw New NotImplementedException()

              ' Work was done for this command. Mark the event as handled.
              e.Handled = True
          End Sub</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VB\Snippets\1033\WPF\RoutedEvent.snippet</File>
    <Title>Add a RoutedEvent Registration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Adds code to register a RoutedEvent. This snippet must be added to a class that derives from UIElement.</Description>
    <Keywords />
    <Language>VB</Language>
    <Code>
          Public Custom Event $eventName$ As $eventHandlerType$

              AddHandler(ByVal value As $eventHandlerType$)
                  Me.AddHandler($eventName$Event, value)
              End AddHandler

              RemoveHandler(ByVal value As $eventHandlerType$)
                  Me.RemoveHandler($eventName$Event, value)
              End RemoveHandler

	      RaiseEvent(ByVal sender As Object, ByVal e As RoutedEventArgs)
        	  Me.RaiseEvent(e)
	      End RaiseEvent
          End Event

    Public Shared ReadOnly $eventName$Event As RoutedEvent = _
                      EventManager.RegisterRoutedEvent("$eventName$", _
                      RoutingStrategy.Bubble, _
                      GetType($eventHandlerType$), GetType($ownerType$))
          </Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\attribute.snippet</File>
    <Title>attribute</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for attribute using recommended pattern</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$SystemAttributeUsage$($SystemAttributeTargets$.$target$, Inherited = $inherited$, AllowMultiple = $allowmultiple$)]
sealed class $name$Attribute : $SystemAttribute$
{
    // See the attribute guidelines at 
    //  http://go.microsoft.com/fwlink/?LinkId=85236
    readonly string positionalString;
    
   // This is a positional argument
   public $name$Attribute (string positionalString) 
   { 
        this.positionalString = positionalString;
        
       // TODO: Implement code here
       $end$throw new $Exception$();       
   }
   
    public string PositionalString
    {
        get { return positionalString; }
    }
   
   // This is a named argument
   public int NamedInt { get; set; } 
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\checked.snippet</File>
    <Title>checked</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for checked block</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>checked
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\class.snippet</File>
    <Title>class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for class</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>class $name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\ctor.snippet</File>
    <Title>ctor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for constructor</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $classname$ ()
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\cw.snippet</File>
    <Title>cw</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for Console.WriteLine</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$SystemConsole$.WriteLine($end$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\do.snippet</File>
    <Title>do</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for do...while loop</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>do
	{
	        $selected$ $end$
	} while ($expression$);</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\else.snippet</File>
    <Title>else</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for else statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>else
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\enum.snippet</File>
    <Title>enum</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for enum</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>enum $name$
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\equals.snippet</File>
    <Title>equals</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for implementing Equals() according to guidelines</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>// override object.Equals
    public override bool Equals (object obj)
    {
        //       
        // See the full list of guidelines at
        //   http://go.microsoft.com/fwlink/?LinkID=85237  
        // and also the guidance for operator== at
        //   http://go.microsoft.com/fwlink/?LinkId=85238
        //

        if (obj == null || GetType() != obj.GetType()) 
        {
            return false;
        }
        
        // TODO: write your implementation of Equals() here
        throw new $Exception$();
        return base.Equals (obj);$end$ 
    }
    
    // override object.GetHashCode
    public override int GetHashCode()
    {
        // TODO: write your implementation of GetHashCode() here
        throw new $Exception$();
        return base.GetHashCode();
    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\exception.snippet</File>
    <Title>exception</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for exception</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$SystemSerializable$]
public class $newException$Exception : $baseException$
{
  public $newException$Exception() { }
  public $newException$Exception( string message ) : base( message ) { }
  public $newException$Exception( string message, $SystemException$ inner ) : base( message, inner ) { }
  protected $newException$Exception( 
	$SystemRuntimeSerializationSerializationInfo$ info, 
	$SystemRuntimeSerializationStreamingContext$ context ) : base( info, context ) { }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\for.snippet</File>
    <Title>for</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for 'for' loop</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>for (int $index$ = 0; $index$ &lt; $max$; $index$++)
			{
			$selected$ $end$
			}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\foreach.snippet</File>
    <Title>foreach</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for foreach statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>foreach ($type$ $identifier$ in $collection$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\forr.snippet</File>
    <Title>forr</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for reverse 'for' loop</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>for (int $index$ = $max$ - 1; $index$ &gt;= 0 ; $index$--)
			{
			$selected$ $end$
			}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\if.snippet</File>
    <Title>if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for if statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>if ($expression$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\indexer.snippet</File>
    <Title>indexer</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for indexer</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$access$ $type$ this[$indextype$ index]
	{
		get {$end$ /* return the specified index here */ }
		set { /* set the specified index to value here */ }
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\interface.snippet</File>
    <Title>interface</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for interface</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>interface I$name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\invoke.snippet</File>
    <Title>invoke</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for safely invoking an event</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$DelegateType$ temp = $event$;
if (temp != null)
{
temp($end$);
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\iterator.snippet</File>
    <Title>iterator</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a simple iterator</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $SystemCollectionsGenericIEnumeratorG$&lt;$type$&gt; GetEnumerator()
{
    $end$throw new $Exception$();
    yield return default($type$);
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\iterindex.snippet</File>
    <Title>iterindex</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for 'named' iterator/indexer pair using a nested class</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $name$Iterator $name$
        {
            get
            {
                return new $name$Iterator(this);
            }
        }

        public class $name$Iterator
        {
            readonly $outer$ outer;

            internal $name$Iterator($outer$ outer)
            {
                this.outer = outer;
            }

            // TODO: provide an appropriate implementation here
            public int Length { get { return 1; } }

            public $type$ this[int index]
            {
                get
                {
                    //
                    // TODO: implement indexer here
                    //
                    // you have full access to $outer$ privates
                    //
                    $end$throw new $Exception$();
                    return default($type$);
                }
            }

            public $SystemCollectionsGenericIEnumeratorG$&lt;$type$&gt; GetEnumerator()
            {
                for (int i = 0; i &lt; this.Length; i++)
                {				 
                    yield return this[i];
                }
            }
        }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\lock.snippet</File>
    <Title>lock</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for lock statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>lock ($expression$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\mbox.snippet</File>
    <Title>mbox</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for MessageBox.Show</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$SystemWindowsFormsMessageBox$.Show($string$);$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\namespace.snippet</File>
    <Title>namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for namespace</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>namespace $name$
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\pp_if.snippet</File>
    <Title>#if</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for #if</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>#if $expression$
		$selected$ $end$ 
	#endif</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\pp_region.snippet</File>
    <Title>#region</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for #region</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>#region $name$
		$selected$ $end$
	#endregion</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\prop.snippet</File>
    <Title>prop</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for an automatically implemented property
Language Version: C# 3.0 or higher</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $type$ $property$ { get; set; }$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\propfull.snippet</File>
    <Title>propfull</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for property and backing field</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>private $type$ $field$;

	public $type$ $property$
	{
		get { return $field$;}
		set { $field$ = value;}
	}
	$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\propg.snippet</File>
    <Title>propg</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for an automatically implemented property with a 'get' accessor and a private 'set' accessor
Language Version: C# 3.0 or higher</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>public $type$ $property$ { get; private set; }$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\sim.snippet</File>
    <Title>sim</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for int Main()</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>static int Main(string[] args)
{
	$end$
	return 0;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\struct.snippet</File>
    <Title>struct</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for struct</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>struct $name$
	{
		$selected$$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\svm.snippet</File>
    <Title>svm</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for 'void Main' method</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>static void Main(string[] args)
{
	$end$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\switch.snippet</File>
    <Title>switch</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for switch statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>switch ($expression$)
	{
		$cases$
	}$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\try.snippet</File>
    <Title>try</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for try catch</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>try 
	{	        
		$selected$
	}
	catch ($expression$)
	{
		$end$
		throw;
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\tryf.snippet</File>
    <Title>tryf</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for try finally</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>try 
	    {	        
		    $selected$
	    }
	    finally
	    {
		    $end$
	    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\unchecked.snippet</File>
    <Title>unchecked</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for unchecked block</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>unchecked
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\unsafe.snippet</File>
    <Title>unsafe</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for unsafe statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>unsafe
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\using.snippet</File>
    <Title>using</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for using statement</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>using($resource$)
	{
		$selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\while.snippet</File>
    <Title>while</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for while loop</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>while ($expression$)
	{
	        $selected$ $end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Visual C#\~.snippet</File>
    <Title>~</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for destructor</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>~$classname$()
	{
		$end$
	}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\EncapsulateField.snippet</File>
    <Title>Encapsulate Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Refactoring snippet for Encapsulate field</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  get { return $field$; }
  set { $field$ = value; }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\EncapsulateFieldGet.snippet</File>
    <Title>Encapsulate Field Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Refactoring snippet for Encapsulate field</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  get { return $field$; }  
} 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\EncapsulateFieldSet.snippet</File>
    <Title>Encapsulate Field Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Refactoring snippet for Encapsulate field</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

$modifier$ $type$ $name$
{
  set { $field$ = value; }
} 
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\EventStub - Field.snippet</File>
    <Title>Event Stub - Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating an implicit event stub</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\EventStub - Property.snippet</File>
    <Title>Event Stub - Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating an explicit event stub</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	add { $end$throw new $Exception$(); }	
	remove { throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateConstructor - Constructor.snippet</File>
    <Title>Generate Constructor - Constructor</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for the constructor created by the 'Generate Constructor' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$public $modifiers$ $signature$
    {
        // TODO: Complete member initialization$memberassignments$
    }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateConstructor - MemberAssignment.snippet</File>
    <Title>Generate Constructor - Member Assignment</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for member assignments added during the 'Generate Constructor' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$this.$signature$ = $parametername$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateConstructor - MemberDeclaration.snippet</File>
    <Title>Generate Constructor - Member Declaration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for members declared during the 'Generate Constructor' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$private $modifiers$ $type$ $signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateEnumMember.snippet</File>
    <Title>Generate Enum Member</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for the enum member created by the 'Generate Enum Member' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$signature$$comma$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateField.snippet</File>
    <Title>Generate Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for the field created by the 'Generate Field' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$accessibility$ $modifiers$ $type$ $signature$;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateProperty - Auto Property.snippet</File>
    <Title>Generate Property - Auto Property</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for the auto property created by the 'Generate Property' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$$accessibility$ $modifiers$ $type$ $signature$ { get; set; }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateProperty - Property.snippet</File>
    <Title>Generate Property - Property And Backing Field</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for the property created by the 'Generate Property' refactoring</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>private $modifiers$ $type$ $field$;

$accessibility$ $modifiers$ $type$ $signature$
{
    get { return $field$;}
    set { $field$ = value;}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateTypeInExistingFile.snippet</File>
    <Title>Generate Type In Existing File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a type in an existing file</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
$end$namespace $namespace$
{
    $modifiers$ $typekind$ $typename$ $typebase$
    {
    }
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateTypeInExistingFileNoEnclosingNamespace.snippet</File>
    <Title>Generate Type In Existing File - No Enclosing Namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a type in an existing file with no enclosing namespace</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
$end$$modifiers$ $typekind$ $typename$ $typebase$
{
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateTypeInNewFile.snippet</File>
    <Title>Generate Type In New File</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a type in a new file</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$using System;
using System.Collections.Generic;$linqusing$
using System.Text;

namespace $namespace$
{
    $modifiers$ $typekind$ $typename$ $typebase$
    {
    }
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\GenerateTypeInNewFileNoEnclosingNamespace.snippet</File>
    <Title>Generate Type In New File - No Enclosing Namespace</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a type in a new file with no enclosing namespace</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$end$using System;
using System.Collections.Generic;$linqusing$
using System.Text;

$modifiers$ $typekind$ $typename$ $typebase$
{
}
</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\MethodOverrideStub.snippet</File>
    <Title>Method Override Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for overriding a method</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
 	$end$ $CallBase$
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\MethodStub.snippet</File>
    <Title>Method Stub - Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating method stub with a body</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
 	$end$throw new $Exception$();
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\MethodStubNoBody.snippet</File>
    <Title>Method Stub - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a method stub without a body</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyOverrideStub.snippet</File>
    <Title>Property Override Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for overriding a property</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get 
	{ 
		$end$ $CallBaseGet$
	}
	$SetterAccessibility$ set 
	{ 
		$CallBaseSet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyOverrideStubGet.snippet</File>
    <Title>Property Override Stub Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for overriding a property</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get 
	{ 
		$end$ $CallBaseGet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyOverrideStubSet.snippet</File>
    <Title>Property Override Stub Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for overriding a property</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set 
	{ 
		$end$ $CallBaseSet$
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStub.snippet</File>
    <Title>Property Stub</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating property stub</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get 
	{ 
		$end$throw new $Exception$(); 
	}
	$SetterAccessibility$ set 
	{ 
		throw new $Exception$(); 
	}
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStubGet.snippet</File>
    <Title>Property Stub Get</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating property stub</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get { $end$throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStubGetNoBody.snippet</File>
    <Title>Property Stub Get - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a property stub without a body</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	get;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStubNoBody.snippet</File>
    <Title>Property Stub - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating a property stub without a body</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	$GetterAccessibility$ get; $SetterAccessibility$ set;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStubSet.snippet</File>
    <Title>Property Stub Set</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating property stub</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set { $end$throw new $Exception$(); }
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Refactoring\PropertyStubSetNoBody.snippet</File>
    <Title>Property Stub Set - No Body</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for generating property stub without a body</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>$signature$
{
	set;
}</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\NetFX30\propa.snippet</File>
    <Title>Define an attached DependencyProperty</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for an attached property using DependencyProperty as the backing store</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>
                
public static $type$ Get$property$(DependencyObject obj)
{
    return ($type$)obj.GetValue($property$Property);
}

public static void Set$property$(DependencyObject obj, $type$ value)
{
    obj.SetValue($property$Property, value);
}

// Using a DependencyProperty as the backing store for $property$.  This enables animation, styling, binding, etc...
public static readonly DependencyProperty $property$Property =
    DependencyProperty.RegisterAttached("$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata($defaultvalue$));

$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\NetFX30\propdp.snippet</File>
    <Title>Define a DependencyProperty</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a property using DependencyProperty as the backing store</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>

public $type$ $property$
{
    get { return ($type$)GetValue($property$Property); }
    set { SetValue($property$Property, value); }
}

// Using a DependencyProperty as the backing store for $property$.  This enables animation, styling, binding, etc...
public static readonly DependencyProperty $property$Property = 
    DependencyProperty.Register("$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata($defaultvalue$));

$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Test\testclass.snippet</File>
    <Title>Test Class</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a test class</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$TestClass$]
      public class $name$
      {
          $end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC#\Snippets\1033\Test\testmethod.snippet</File>
    <Title>Test Method</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Code snippet for a test method</Description>
    <Keywords />
    <Language>csharp</Language>
    <Code>[$TestMethod$]
      public void $name$()
      {
          $end$
      }</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\DataContext.snippet</File>
    <Title>d:DataContext</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a new design-time DataContext attribute</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>d:DataContext="{d:DesignInstance Type=$DesignTimeViewModel$, IsDesignTimeCreatable=True}"</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\Grid.snippet</File>
    <Title>Grid ColumnDefinition</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a Grid ColumnDefinition</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;ColumnDefinition Width="$Value$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\Grid.snippet</File>
    <Title>Grid RowDefinition</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a Grid RowDefinition</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;RowDefinition Height="$Value$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\Region.snippet</File>
    <Title>#region</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a new collapsible XAML region</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;!--#region $RegionName$ --&gt;$end$$selected$&lt;!--#endregion--&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\Setter.snippet</File>
    <Title>Setter</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a new Setter</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;Setter Property="$PropertyName$" Value="$PropertyValue$" /&gt;$selected$$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\DesignTools\Snippets\XAML\1033\Snippets\Tag.snippet</File>
    <Title>Tag</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Snippet for a new element</Description>
    <Keywords />
    <Language>XAML</Language>
    <Code>&lt;$TagName$&gt;$selected$$end$&lt;/$TagName$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\Parent.snippet</File>
    <Title>Element</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for new parent element</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;$name$&gt;$selected$$end$&lt;/$name$&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\schema.snippet</File>
    <Title>Schema</Title>
    <Author>Microsoft Corporation</Author>
    <Description>Expansion snippet for XSD Schema</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xs:schema targetNamespace="$namespace$"
           xmlns="$namespace$"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;$selected$$end$&lt;/xs:schema&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\snippet.snippet</File>
    <Title>Snippet</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for creating new XML snippets!</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;CodeSnippet Format="1.0.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet"&gt;
  &lt;Header&gt;
    &lt;Title&gt;$title$&lt;/Title&gt;
    &lt;Author&gt;$author$&lt;/Author&gt;
    &lt;Shortcut&gt;$shortcut$&lt;/Shortcut&gt;
    &lt;Description&gt;$description$&lt;/Description&gt;
    &lt;SnippetTypes&gt;
      &lt;SnippetType&gt;SurroundsWith&lt;/SnippetType&gt;
      &lt;SnippetType&gt;Expansion&lt;/SnippetType&gt;
    &lt;/SnippetTypes&gt;
  &lt;/Header&gt;
  &lt;Snippet&gt;
    &lt;Declarations&gt;
    &lt;Literal&gt;
        &lt;ID&gt;$name$&lt;/ID&gt;
        &lt;Default&gt;$value$&lt;/Default&gt;
    &lt;/Literal&gt;
    &lt;/Declarations&gt;
    &lt;Code Language="XML"&gt;&lt;![CDATA[$end$&lt;test&gt;
      &lt;name&gt;$$$name$$$&lt;/name&gt;
      $selected$$$selected$$ $$end$$&lt;/test&gt;$endcdata$
    &lt;/Code&gt;
    &lt;/Snippet&gt;
&lt;/CodeSnippet&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Attributes\enum.snippet</File>
    <Title>enumeration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD attribute with enumeration</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
      &lt;xsd:simpleType&gt;
        &lt;xsd:restriction base="$prefix$$type$"&gt;
          &lt;xsd:enumeration value="$value$"/&gt;$selected$$end$
        &lt;/xsd:restriction&gt;&lt;/xsd:simpleType&gt;
      &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Attributes\integer.snippet</File>
    <Title>integer restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD attribute of type integer</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Attributes\pattern.snippet</File>
    <Title>pattern restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for defining a XSD attribute of simpleType with pattern</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;
       &lt;xsd:pattern value="$value$"/&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Attributes\string.snippet</File>
    <Title>string restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for defining XSD attribute wiht simpleType restriction of string</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:attribute name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$
      &lt;/xsd:restriction&gt;
     &lt;/xsd:simpleType&gt;
    &lt;/xsd:attribute&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\ComplexTypes\all.snippet</File>
    <Title>all group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType element with all</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:all&gt;$selected$$end$&lt;/xsd:all&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\ComplexTypes\any.snippet</File>
    <Title>sequence with any</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType with any element</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xsd:sequence&gt;$selected$$end$
      &lt;xsd:any namespace="$namespace$" processContents="$pc$"/&gt;
     &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\ComplexTypes\attribute.snippet</File>
    <Title>attribute</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType with attribute</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;$selected$
      &lt;xsd:attribute name=$attName$&gt;$end$&lt;/xsd:attribute&gt;
     &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\ComplexTypes\choice.snippet</File>
    <Title>choice</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType with choice.</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:choice minOccurs="$min$" maxOccurs="$max$"&gt;$selected$$end$
    &lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\ComplexTypes\sequence.snippet</File>
    <Title>sequence</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType with sequence</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:sequence&gt;$selected$$end$&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Elements\all.snippet</File>
    <Title>all group</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType element with XSD all</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:all&gt;$selected$$end$&lt;/xsd:all&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Elements\choice.snippet</File>
    <Title>choice</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType element with XSD choice</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:choice&gt;$selected$$end$&lt;/xsd:choice&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Elements\complex.snippet</File>
    <Title>complexType</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType element</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;$selected$$end$&lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Elements\sequence.snippet</File>
    <Title>sequence</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType element with XSD sequence</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:complexType&gt;
    &lt;xsd:sequence&gt;$selected$$end$&lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Elements\simple.snippet</File>
    <Title>simpleType</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD simpleType element</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:element name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:simpleType&gt;
    &lt;xsd:restriction base="$prefix$$base$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
    &lt;/xsd:element&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Extensions\attribute.snippet</File>
    <Title>simpleContent</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType simpleContent extension that adds an attribute</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:simpleContent&gt;&lt;xsd:extension base="$prefix$$base$"&gt;&lt;xsd:attribute name=$attName$&gt;$selected$$end$&lt;/xsd:attribute&gt;&lt;/xsd:extension&gt;&lt;/xsd:simpleContent&gt;&lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Extensions\complex.snippet</File>
    <Title>complexContent</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD complexType complexContent extension</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:complexType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:complexContent&gt;&lt;xsd:extension base="$base$"&gt;$selected$$end$&lt;/xsd:extension&gt;&lt;/xsd:complexContent&gt;&lt;/xsd:complexType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Misc\attributeGroup.snippet</File>
    <Title>attributeGroup</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD attributeGroup</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xs:attributeGroup name="$name$" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
     &lt;xs:attribute ref="$attrName$"/&gt;$selected$$end$
    &lt;/xs:attributeGroup&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\Misc\documentation.snippet</File>
    <Title>documentation</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD documentation</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:annotation xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;&lt;xsd:documentation&gt;$text$$selected$$end$&lt;/xsd:documentation&gt;&lt;/xsd:annotation&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\SimpleTypes\enum.snippet</File>
    <Title>enumeration</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD simpleType enumeration</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;
    &lt;xsd:enumeration value="$value$"/&gt;$selected$$end$
    &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\SimpleTypes\integer.snippet</File>
    <Title>integer restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD simpleType integer</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\SimpleTypes\pattern.snippet</File>
    <Title>pattern restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD simpleType pattern</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType  name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;
    &lt;xsd:pattern value="$value$"/&gt;$selected$$end$
    &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xsd\SimpleTypes\string.snippet</File>
    <Title>string restriction</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet for XSD simpleType string</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsd:simpleType name="$name$" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
    &lt;xsd:restriction base="$prefix$$type$"&gt;$selected$$end$&lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xslt\html\htmlTable.snippet</File>
    <Title>Table Template </Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet creating an HTML table in XSLT</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsl:template match="/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;html&gt;&lt;head&gt;&lt;title&gt;$title$&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;&lt;h4&gt;$title$&lt;/h4&gt;
    &lt;table border="1"&gt;
    &lt;tbody &gt;&lt;tr&gt;&lt;th&gt;$header1$&lt;/th&gt;&lt;th&gt;$header2$&lt;/th&gt;&lt;/tr&gt;
    &lt;xsl:apply-templates select="$xpath$"/&gt;&lt;/tbody&gt;
    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&lt;/xsl:template&gt;$end$</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xslt\html\tableRowTemplate.snippet</File>
    <Title>Table Row Template</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XSL Template for generating table rows in a Template</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;xsl:template match="$xpath_1$" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&lt;tr&gt;&lt;td&gt;&lt;xsl:value-of select="$xpath_2$"/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/xsl:template&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xslt\xslTags\scriptCS.snippet</File>
    <Title>C# XSLT Script Block</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet to create a C# script block in XSLT</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="C#"&gt;
    &lt;ms:using namespace="System.Xml.XPath"/&gt;
    &lt;![CDATA[
    public string $function$(XPathNodeIterator iterator) {
      if (iterator.MoveNext()) {
        XPathNavigator nav = iterator.Current;
        return nav.LocalName$end$;
      }
      return "";
    }$endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xslt\xslTags\scriptJS.snippet</File>
    <Title>JScript XSLT Script Block</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet to create a JScript script block in XSLT</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="JScript"&gt;
      &lt;ms:using namespace="System.Xml.XPath"/&gt;
      &lt;![CDATA[
      function $function$ (iterator : XPathNodeIterator) 
      {
        if (iterator.MoveNext()) 
        {
          var nav : XPathNavigator = iterator.Current;
          return nav.LocalName$end$;
        }
        return "";
      }$endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\xml\1033\Snippets\xslt\xslTags\scriptVB.snippet</File>
    <Title>VB XSLT Script Block</Title>
    <Author>Microsoft Corporation</Author>
    <Description>XML snippet to create a VB script block in XSLT</Description>
    <Keywords />
    <Language>XML</Language>
    <Code>&lt;ms:script implements-prefix="$user$" xmlns:ms="urn:schemas-microsoft-com:xslt" language="VB"&gt;
    &lt;ms:using namespace="System.Xml.XPath"/&gt;
    &lt;![CDATA[    
    function $function$(iterator as XPathNodeIterator) as string 
      if (iterator.MoveNext()) then
        Dim nav as XPathNavigator = iterator.Current
        return nav.LocalName$end$
      else 
        return ""
      end if
    end function
    $endcdata$
    &lt;/ms:script&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
  <SnippetIndexItem>
    <File>C:\Users\chris\OneDrive\Documents\Visual Studio 2019\Code Snippets\XML\My Xml Snippets\SnippetFile1.snippet</File>
    <Title>SnippetFile1</Title>
    <Author />
    <Description />
    <Keywords />
    <Language>xml</Language>
    <Code>    &lt;Compile Include="$selected$"&gt;
      &lt;DependentUpon&gt;App.xaml&lt;/DependentUpon&gt;
      &lt;SubType&gt;Code&lt;/SubType&gt;
    &lt;/Compile&gt;</Code>
    <Delimiter>$</Delimiter>
  </SnippetIndexItem>
</ArrayOfSnippetIndexItem>